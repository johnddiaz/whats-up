{"version":3,"sources":["components/Avatar/Avatar.module.scss","components/ChatPreview/ChatPreview.module.scss","components/Header/Header.module.scss","components/BottomSettings/BottomSettings.module.scss","components/ChatPreview/index.tsx","components/ChatPreview/ChatPreview.tsx","components/Avatar/Avatar.tsx","components/Header/Header.tsx","components/HomeHeader/index.tsx","components/HomeHeader/HomeHeader.tsx","components/InteractionMessage/index.tsx","components/InteractionMessage/InteractionMessage.tsx","__shared__/utils/dateTime.ts","components/Interaction/index.tsx","components/Interaction/Interaction.tsx","components/InteractionMessageEditor/index.tsx","components/InteractionMessageEditor/InteractionMessageEditor.tsx","components/App/layouts.tsx","components/SignIn/SignIn.tsx","__shared__/auth/useFirebaseAuth.ts","__shared__/utils/useLocalStorageState.ts","components/InteractionCreator/index.ts","components/InteractionCreator/InteractionCreator.tsx","components/InteractionBar/index.tsx","components/InteractionBar/InteractionBar.tsx","components/UserSettings/UserSettings.tsx","components/App/useLayoutStateReducer.ts","components/BottomSettings/BottomSettings.tsx","components/App/useConversationFormReducer.ts","components/App/App.tsx","__shared__/auth/withAuth.tsx","components/App/index.tsx","__shared__/hooks/useConversation.ts","components/App/useUsers.ts","__shared__/hooks/useWindowSize.ts","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","ChatPreview","props","className","styles","root","onClick","onPreviewClick","conversation","id","textRoot","style","margin","name","otherUsers","length","map","user","index","original","userName","Avatar","avatarDimensions","size","height","width","badgeDimensions","marginTop","marginLeft","src","photoURL","alt","img","badgeState","badge","backgroundColor","Header","children","HomeHeader","userState","fontSize","InteractionMessage","React","showTime","setShowTime","personClass","isSender","placementClass","borderStyling","squishAbove","squishBelow","ref","newestMessageRef","display","flexDirection","undefined","showName","marginBottom","textAlign","message","senderName","alignSelf","marginRight","avatar","whiteSpace","prev","content","Date","createdAt","toLocaleString","MILLIS_IN_SEC","MILLIS_IN_HOUR","convertToMillis","days","hours","mins","secs","millis","runningVal","convertToSecs","Interaction","current","scrollIntoView","behavior","messages","styling","reduce","previousStyling","currentMessage","arr","currentMessageSeconds","Number","parseInt","sender","previousMessageTime","nextMessageTime","messagesWithoutAvatar","now","dayFormatter","Intl","DateTimeFormat","weekday","monthFormatter","month","userId","userStatus","statuses","currentDate","showTimelineAboveMessage","pastDate","toDateString","getTime","getHours","minutes","getMinutes","timelineDay","timelineTime","nowOffset","getSeconds","getMilliseconds","format","getDate","state","renderMessagesTimeline","InteractionMessageEditor","onChange","handleMessageChange","value","currentDraft","type","handleSend","ChatsLayout","flexGrow","flexBasis","maxWidth","InteractionLayout","SignIn","alignItems","justifyContent","showSignInPopup","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","useFirebaseAuth","key","useState","storedValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","useLocalStorageState","setUser","githubProvider","setGithubProvider","googleProvider","setGoogleProvider","a","firebase","database","uid","once","val","update","displayName","console","log","set","apps","initializeApp","auth","GithubAuthProvider","GoogleAuthProvider","onAuthStateChanged","createUserInFirebaseIfNonexistent","method","selectedProvider","signInWithPopup","catch","error","InteractionCreator","handlePersonSelect","e","preventDefault","dispatchForm","payload","target","dataset","personid","formState","newConversationName","currentTarget","users","filter","minWidth","userSelect","padding","border","borderRadius","peopleForNewConversation","includes","data-personid","userStatuses","InteractionBar","back","color","cursor","icon","faArrowLeft","UserSettings","newUsername","setNewUsername","onSubmit","updateProfile","htmlFor","paddingBottom","placeholder","layoutStateReducer","action","showConversationForm","showUserSettings","BottomSettings","logOut","conversationFormReducer","person","withAuth","WrappedComponent","App","appInitiated","initialized","conversations","setConversations","conversationId","setConversationId","setMessages","db","userConversationsRefString","userConversationsRef","orderByKey","userConversationsOnce","initialConversations","lastInitialUserConversationId","exists","convoPromises","cuPromises","forEach","uc","push","Promise","all","convoResolved","cuResolved","convo","matchedConversation","find","cor","matchedConversationUsers","cur","conversationUser","child","startAfter","on","userConversationSnapshot","previousChildKey","ucKey","then","newConversationUsers","ncu","off","messagesRefString","messagesRef","messagesOnce","initialMessages","m","serverMessage","toJSON","lastInitialMessageId","messageSnapshot","clientMessage","useConversation","currentConversation","c","setStatuses","setUsers","userStatusDatabaseRef","infoConnectedRef","isOfflineForDatabase","lastChanged","ServerValue","TIMESTAMP","isOnlineForDatabase","snapshot","onDisconnect","statusRef","lastStatusKey","newStatuses","data","usersRef","lastUserKey","newUsers","changedUser","useUsers","windowSize","setWindowSize","handleResize","window","innerWidth","addEventListener","removeEventListener","useWindowSize","setCurrentDraft","useReducer","useLayoutStateReducer","layoutState","layoutStateDispatch","useConversationFormReducer","conversationFormState","dispatchConversationForm","handlePreviewSelect","dispatchWithConversationId","personId","friendSnapshots","alert","conversationRef","creatorId","everythingElse","invitedBy","returnToMain","showInteractionLayout","showHomeLayout","faPlusCircle","overflow","signOut","openUserSettings","backIcon","userInfo","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e47490d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Avatar_root__Kd_qp\",\"img\":\"Avatar_img__3V-MN\",\"badge\":\"Avatar_badge__3Amf_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ChatPreview_root__ZRdO5\",\"textRoot\":\"ChatPreview_textRoot__2r08x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Header_root__2uEfk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"BottomSettings_root__3V1F-\"};","import ChatPreview from './ChatPreview'\r\n\r\nexport default ChatPreview\r\n","import * as React from 'react'\r\nimport styles from './ChatPreview.module.scss'\r\nimport '../../__shared__/styles.scss'\r\nimport { ClientConversation } from '../../__shared__/models'\r\n\r\ninterface Props {\r\n    conversation: ClientConversation\r\n    onPreviewClick: (id: string) => void\r\n}\r\n\r\nexport default function ChatPreview(props: Props) {\r\n    function onPreviewClick() {\r\n        props.onPreviewClick(props.conversation.id)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.root} onClick={onPreviewClick}>\r\n            <div className={styles.textRoot}>\r\n                <h4 style={{ margin: '0 0 8px' }}>\r\n                    {props.conversation.name || props.conversation.id}\r\n                </h4>\r\n                <p style={{ margin: '0' }}>\r\n                    {props.conversation.otherUsers.length > 0\r\n                        ? props.conversation.otherUsers.map(\r\n                              (user, index, original) => {\r\n                                  if (\r\n                                      original.length === 1 ||\r\n                                      index === original.length - 1\r\n                                  ) {\r\n                                      return user.userName || user.id\r\n                                  } else {\r\n                                      return `${user.userName || user.id}, `\r\n                                  }\r\n                              }\r\n                          )\r\n                        : 'No users here.'}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react'\r\nimport { ClientUserStatus } from '../../__shared__/types/userStatus'\r\nimport styles from './Avatar.module.scss'\r\n\r\ninterface Props {\r\n    photoURL: string\r\n    size?: 'sm' | 'lg'\r\n    badgeState?: ClientUserStatus['state'] | null\r\n    style?: React.CSSProperties\r\n}\r\n\r\nexport default function Avatar(props: Props) {\r\n    const avatarDimensions =\r\n        props.size === 'sm'\r\n            ? {\r\n                  height: '28px',\r\n                  width: '28px',\r\n              }\r\n            : {\r\n                  height: '36px',\r\n                  width: '36px',\r\n              }\r\n    const badgeDimensions =\r\n        props.size === 'sm'\r\n            ? {\r\n                  height: '8px',\r\n                  width: '8px',\r\n                  marginTop: '-12px',\r\n                  marginLeft: '21px',\r\n              }\r\n            : {\r\n                  height: '11px',\r\n                  width: '11px',\r\n                  marginTop: '-14px',\r\n                  marginLeft: '24px',\r\n              }\r\n    return (\r\n        <div\r\n            className={styles.root}\r\n            style={{ ...avatarDimensions, ...props.style }}\r\n        >\r\n            <img\r\n                src={props.photoURL}\r\n                alt=\"profile pic\"\r\n                className={styles.img}\r\n                style={avatarDimensions}\r\n            />\r\n            {props.badgeState && (\r\n                <div\r\n                    className={styles.badge}\r\n                    style={{\r\n                        backgroundColor:\r\n                            props.badgeState === 'online'\r\n                                ? '#57ba14'\r\n                                : '#f9fff5',\r\n                        ...badgeDimensions,\r\n                    }}\r\n                ></div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react'\r\nimport styles from './Header.module.scss'\r\n\r\ninterface Props {\r\n    children?: React.ReactNode\r\n}\r\n\r\nexport default function Header(props: Props) {\r\n    return <header className={styles.root}>{props.children}</header>\r\n}\r\n","import HomeHeader from './HomeHeader'\r\n\r\nexport default HomeHeader\r\n","import * as React from 'react'\r\nimport firebase from 'firebase'\r\nimport Avatar from '../Avatar'\r\nimport styles from './HomeHeader.module.scss'\r\nimport Header from '../Header'\r\n\r\ninterface Props {\r\n    user: firebase.User | null\r\n    userState: 'online' | 'offline' | null\r\n}\r\n\r\nexport default function HomeHeader(props: Props) {\r\n    return (\r\n        <Header>\r\n            {props.user?.photoURL && (\r\n                <Avatar\r\n                    photoURL={props.user.photoURL}\r\n                    size={'sm'}\r\n                    badgeState={props.userState}\r\n                />\r\n            )}\r\n\r\n            <h3\r\n                style={{\r\n                    marginLeft: '16px',\r\n                    fontSize: '1.3em',\r\n                }}\r\n            >\r\n                Whats Up\r\n            </h3>\r\n        </Header>\r\n    )\r\n}\r\n","import InteractionMessage, {\r\n    InteractionMessageProps,\r\n} from './InteractionMessage'\r\n\r\nexport default InteractionMessage\r\n\r\nexport type { InteractionMessageProps }\r\n","import * as React from 'react'\r\nimport { ClientMessage } from '../../__shared__/models'\r\nimport { ClientUserStatus } from '../../__shared__/types/userStatus'\r\nimport './InteractionMessage.scss'\r\n\r\nexport interface InteractionMessageProps {\r\n    isSender: boolean\r\n    userStatus: ClientUserStatus | undefined\r\n    message: ClientMessage\r\n    avatar: JSX.Element | null\r\n    showName?: boolean\r\n    squishAbove?: boolean\r\n    squishBelow?: boolean\r\n    styles?: React.CSSProperties\r\n    newestMessageRef?: React.MutableRefObject<HTMLDivElement | null>\r\n    placementClass?: string\r\n    marginTop?: string\r\n}\r\n\r\nexport default function InteractionMessage(props: InteractionMessageProps) {\r\n    const [showTime, setShowTime] = React.useState(false)\r\n\r\n    const personClass = props.isSender\r\n        ? 'interactionmessage-self'\r\n        : 'interactionmessage-friend'\r\n    const placementClass = props.placementClass ? props.placementClass : ''\r\n\r\n    const borderStyling: React.CSSProperties = {}\r\n    if (props.squishAbove) {\r\n        const property = props.isSender\r\n            ? 'borderTopRightRadius'\r\n            : 'borderTopLeftRadius'\r\n        borderStyling[property] = '3px'\r\n    }\r\n    if (props.squishBelow) {\r\n        const property = props.isSender\r\n            ? 'borderBottomRightRadius'\r\n            : 'borderBottomLeftRadius'\r\n        borderStyling[property] = '3px'\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={placementClass}\r\n            ref={props.newestMessageRef}\r\n            style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                ...(props.marginTop\r\n                    ? { marginTop: props.marginTop }\r\n                    : undefined),\r\n            }}\r\n        >\r\n            {props.showName && !props.isSender && (\r\n                <p\r\n                    style={{\r\n                        marginBottom: '2px',\r\n                        marginTop: '0px',\r\n                        textAlign: props.isSender ? 'right' : 'left',\r\n                        fontSize: '12px',\r\n                        ...(!props.isSender ? { marginLeft: '56px' } : null), // profile pic size + account for border radius\r\n                    }}\r\n                >\r\n                    {props.message.senderName}\r\n                </p>\r\n            )}\r\n\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    alignSelf: props.isSender ? 'flex-end' : 'flex-start',\r\n                }}\r\n            >\r\n                {!props.isSender && (\r\n                    <div\r\n                        style={{\r\n                            marginRight: '8px',\r\n                            height: '36px',\r\n                            width: '36px',\r\n                        }}\r\n                    >\r\n                        {props.avatar}\r\n                    </div>\r\n                )}\r\n                <p\r\n                    id=\"interactionmessage-text\"\r\n                    className={personClass}\r\n                    style={{ ...borderStyling, whiteSpace: 'pre-wrap' }}\r\n                    onClick={() => setShowTime((prev) => !prev)}\r\n                >\r\n                    {props.message.content}\r\n                </p>\r\n            </div>\r\n            {showTime && (\r\n                <p\r\n                    style={{\r\n                        marginTop: '4px',\r\n                        textAlign: props.isSender ? 'right' : 'left',\r\n                        ...(!props.isSender\r\n                            ? { marginLeft: '56px' }\r\n                            : { marginRight: '12px' }),\r\n                        fontSize: '10px',\r\n                        marginBottom: '0px',\r\n                    }}\r\n                >\r\n                    {new Date(props.message.createdAt).toLocaleString()}\r\n                </p>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","const MILLIS_IN_SEC = 1000\r\nconst SECS_IN_MIN = 60\r\nconst MINS_IN_HOUR = 60\r\nconst MILLIS_IN_HOUR = MILLIS_IN_SEC * SECS_IN_MIN * MINS_IN_HOUR\r\nconst MILLIS_IN_MIN = MILLIS_IN_SEC * SECS_IN_MIN\r\nconst HOURS_IN_DAY = 24\r\n\r\nexport function convertToMillis({\r\n    days,\r\n    hours,\r\n    mins,\r\n    secs,\r\n    millis,\r\n}: Partial<\r\n    Record<'days' | 'hours' | 'mins' | 'secs' | 'millis', number>\r\n>): number {\r\n    let runningVal = 0\r\n    if (days) {\r\n        runningVal += days * HOURS_IN_DAY * MILLIS_IN_HOUR\r\n    }\r\n    if (hours) {\r\n        runningVal += hours * MILLIS_IN_HOUR\r\n    }\r\n    if (mins) {\r\n        runningVal += mins * MILLIS_IN_MIN\r\n    }\r\n    if (secs) {\r\n        runningVal += secs * MILLIS_IN_SEC\r\n    }\r\n    if (millis) {\r\n        runningVal += millis\r\n    }\r\n    return runningVal\r\n}\r\n\r\nexport function convertToSecs({\r\n    millis,\r\n}: Partial<Record<'millis', number>>): number {\r\n    let runningVal = 0\r\n    if (millis) {\r\n        runningVal += millis / MILLIS_IN_SEC\r\n    }\r\n    return runningVal\r\n}\r\n","import Interaction from './Interaction'\r\n\r\nexport default Interaction\r\n","import * as React from 'react'\r\nimport './Interaction.scss'\r\nimport InteractionMessage from '../InteractionMessage'\r\nimport { ClientConversation, ClientMessage } from '../../__shared__/models'\r\nimport { ClientUserStatuses } from '../../__shared__/types/userStatus'\r\nimport Avatar from '../Avatar'\r\nimport { convertToMillis, convertToSecs } from '../../__shared__/utils/dateTime'\r\n\r\ninterface MessageStyling {\r\n    squishAbove: {\r\n        [messageId: string]: boolean\r\n    }\r\n    squishBelow: {\r\n        [messageId: string]: boolean\r\n    }\r\n    messagesWithoutAvatar: {\r\n        [messageId: string]: boolean\r\n    }\r\n    marginTop: {\r\n        [messageId: string]: string\r\n    }\r\n}\r\n\r\ninterface Props {\r\n    userId: string\r\n    conversation: ClientConversation\r\n    messages: ClientMessage[]\r\n    statuses: ClientUserStatuses\r\n}\r\n\r\nexport default function Interaction(props: Props) {\r\n    const newestMessageRef = React.useRef<HTMLDivElement | null>(null)\r\n\r\n    React.useEffect(() => {\r\n        if (newestMessageRef.current) {\r\n            newestMessageRef.current.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n    }, [props.messages.length])\r\n\r\n    /**\r\n     * Calculates which message ids (and in turn, the InteractionMessage) will need\r\n     * to be styled differently with a squished effect.\r\n     */\r\n    function calculateMessageStyling(): MessageStyling {\r\n        const styling: MessageStyling = {\r\n            squishAbove: {},\r\n            squishBelow: {},\r\n            messagesWithoutAvatar: {},\r\n            marginTop: {},\r\n        }\r\n\r\n        return props.messages.reduce(\r\n            (previousStyling, currentMessage, index, arr) => {\r\n                const currentMessageSeconds = convertToSecs({\r\n                    millis: Number.parseInt(currentMessage.createdAt),\r\n                })\r\n                // Look behind - only when there is a previous message for same user\r\n                if (index > 0) {\r\n                    if (arr[index - 1].sender === currentMessage.sender) {\r\n                        const previousMessageTime = arr[index - 1].createdAt\r\n                        const secondsBetweenLastMessage =\r\n                            currentMessageSeconds -\r\n                            convertToSecs({\r\n                                millis: Number.parseInt(previousMessageTime),\r\n                            })\r\n                        if (secondsBetweenLastMessage < 60) {\r\n                            previousStyling.squishAbove[\r\n                                currentMessage.id\r\n                            ] = true\r\n                            previousStyling.marginTop[currentMessage.id] = '1px'\r\n                        } else {\r\n                            previousStyling.marginTop[currentMessage.id] =\r\n                                '12px'\r\n                        }\r\n                    } else {\r\n                        previousStyling.marginTop[currentMessage.id] = '30px'\r\n                    }\r\n                }\r\n                // Look ahead - only when a next message exists for same user\r\n                if (\r\n                    arr.length > 0 &&\r\n                    index < arr.length - 1 &&\r\n                    arr[index + 1].sender === currentMessage.sender\r\n                ) {\r\n                    const nextMessageTime = arr[index + 1].createdAt\r\n                    const secondsBetweenNextMessage =\r\n                        convertToSecs({\r\n                            millis: Number.parseInt(nextMessageTime),\r\n                        }) - currentMessageSeconds\r\n                    if (secondsBetweenNextMessage < 60) {\r\n                        previousStyling.squishBelow[currentMessage.id] = true\r\n                        previousStyling.messagesWithoutAvatar[\r\n                            currentMessage.id\r\n                        ] = true\r\n                    }\r\n                }\r\n                return previousStyling\r\n            },\r\n            styling\r\n        )\r\n    }\r\n\r\n    function renderMessagesTimeline() {\r\n        const styling = calculateMessageStyling()\r\n        const now = new Date() // race condition possible, but chances are small\r\n        const dayFormatter = new Intl.DateTimeFormat('en-US', {\r\n            weekday: 'long',\r\n        })\r\n        const monthFormatter = new Intl.DateTimeFormat('en-US', {\r\n            month: 'short',\r\n        })\r\n        return props.messages.map((message, index, arr) => {\r\n            const isSender = !!(props.userId && props.userId === message.sender)\r\n            const userStatus = props.statuses[message.sender]\r\n            const currentDate = new Date(message.createdAt)\r\n            let showTimelineAboveMessage: boolean = false\r\n\r\n            // show timeline if current message is first in the list,\r\n            // or if the previous message is a different day tha the current message\r\n            // or if the previous message is 3 or more hours since the current message\r\n\r\n            if (index === 0) {\r\n                showTimelineAboveMessage = true\r\n            } else {\r\n                const pastDate = new Date(arr[index - 1].createdAt)\r\n                showTimelineAboveMessage =\r\n                    index === 0 ||\r\n                    pastDate.toDateString() !== currentDate.toDateString() ||\r\n                    pastDate.getTime() >=\r\n                        currentDate.getTime() + convertToMillis({ hours: 3 })\r\n            }\r\n\r\n            let hours: number | string = currentDate.getHours()\r\n            let minutes: number | string = currentDate.getMinutes()\r\n            hours = hours < 10 ? `${0}${hours}` : hours\r\n            minutes = minutes < 10 ? `${0}${minutes}` : minutes\r\n\r\n            let timelineTime = `${hours}:${minutes}`\r\n            let timelineDay\r\n            if (showTimelineAboveMessage) {\r\n                if (currentDate.toDateString() === now.toDateString()) {\r\n                    timelineDay = 'Today'\r\n                } else if (\r\n                    currentDate.toDateString() ===\r\n                    new Date(\r\n                        now.getTime() - convertToMillis({ days: 1 })\r\n                    ).toDateString()\r\n                ) {\r\n                    timelineDay = 'Yesterday'\r\n                } else {\r\n                    // When calculating messages, we want to see if a message is\r\n                    // within 6 days inclusive.\r\n                    const nowOffset = convertToMillis({\r\n                        hours: now.getHours(),\r\n                        mins: now.getMinutes(),\r\n                        secs: now.getSeconds(),\r\n                        millis: now.getMilliseconds(),\r\n                    })\r\n                    // Within last 6 running days inclusive.\r\n                    // one day has 1000*60*60*24 milliseconds)\r\n                    if (\r\n                        currentDate.getTime() >\r\n                        new Date(\r\n                            now.getTime() -\r\n                                (convertToMillis({ days: 6 }) + nowOffset)\r\n                        ).getTime()\r\n                    ) {\r\n                        timelineDay = dayFormatter.format(currentDate)\r\n                    } else {\r\n                        const month = monthFormatter.format(currentDate)\r\n                        timelineDay = `${dayFormatter.format(\r\n                            currentDate\r\n                        )}, ${month} ${currentDate.getDate()}`\r\n                    }\r\n                }\r\n            }\r\n\r\n            return (\r\n                <React.Fragment key={`rf-${message.id}`}>\r\n                    {showTimelineAboveMessage && timelineDay && (\r\n                        <p\r\n                            key={`tmln-${message.id}`}\r\n                            style={{\r\n                                textAlign: 'center',\r\n                                marginTop: '30px',\r\n                                marginBottom: '8px',\r\n                            }}\r\n                        >\r\n                            {`${timelineDay} - ${timelineTime}`}\r\n                        </p>\r\n                    )}\r\n                    <InteractionMessage\r\n                        key={message.id}\r\n                        message={message}\r\n                        newestMessageRef={\r\n                            index === props.messages.length - 1\r\n                                ? newestMessageRef\r\n                                : undefined\r\n                        }\r\n                        isSender={isSender}\r\n                        userStatus={userStatus}\r\n                        avatar={\r\n                            !isSender &&\r\n                            message.photoURL &&\r\n                            !styling.messagesWithoutAvatar[message.id] ? (\r\n                                <Avatar\r\n                                    photoURL={message.photoURL}\r\n                                    badgeState={userStatus.state}\r\n                                />\r\n                            ) : null\r\n                        }\r\n                        squishAbove={styling.squishAbove[message.id]}\r\n                        squishBelow={styling.squishBelow[message.id]}\r\n                        showName={!styling.squishAbove[message.id]}\r\n                        placementClass={\r\n                            props.userId && props.userId === message.sender\r\n                                ? 'interactionmessage-placement-self'\r\n                                : 'interactionmessage-placement-friend'\r\n                        }\r\n                        marginTop={styling.marginTop[message.id]}\r\n                    />\r\n                </React.Fragment>\r\n            )\r\n        })\r\n    }\r\n\r\n    return <div id=\"interaction-root\">{renderMessagesTimeline()}</div>\r\n}\r\n\r\nexport type { Props as InteractionProps }\r\n","import InteractionMessageEditor from './InteractionMessageEditor'\r\n\r\nexport default InteractionMessageEditor\r\n","import * as React from 'react'\r\nimport './InteractionMessageEditor.scss'\r\n\r\ninterface Props {\r\n    currentDraft: string\r\n    handleSend(e: React.MouseEvent<HTMLInputElement, MouseEvent>): void\r\n    handleMessageChange(e: React.ChangeEvent<HTMLTextAreaElement>): void\r\n}\r\n\r\nexport default function InteractionMessageEditor(props: Props) {\r\n    return (\r\n        <div id=\"interactionmessageeditor-root\">\r\n            <textarea\r\n                onChange={props.handleMessageChange}\r\n                value={props.currentDraft}\r\n            />\r\n            <input type=\"button\" value=\"Send\" onClick={props.handleSend} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport function ChatsLayout(props: { children: React.ReactNode }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                flexGrow: 2,\r\n                flexBasis: 0,\r\n                maxWidth: '700px',\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function InteractionLayout(props: { children: React.ReactNode }) {\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                backgroundColor: 'grey',\r\n                flexGrow: 3,\r\n                flexBasis: 0,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react'\r\n\r\ninterface Props {\r\n    showSignInPopup: (method: 'google' | 'github') => void\r\n}\r\n\r\nexport function SignIn(props: Props) {\r\n    return (\r\n        <div\r\n            style={{\r\n                height: '100%',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                flexDirection: 'column',\r\n            }}\r\n        >\r\n            <button\r\n                style={{ margin: '4px' }}\r\n                onClick={() => props.showSignInPopup('google')}\r\n            >\r\n                Sign in with Google\r\n            </button>\r\n            <button\r\n                style={{ margin: '4px' }}\r\n                onClick={() => props.showSignInPopup('github')}\r\n            >\r\n                Sign in with Github\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import firebase from 'firebase'\r\nimport { useEffect, useState } from 'react'\r\nimport useLocalStorageState from '../utils/useLocalStorageState'\r\n\r\nexport type SupportedAuthProvider = 'google' | 'github'\r\n\r\nconst config = {\r\n    apiKey: 'AIzaSyA51jM6IryfHm1HnzmXo66QQQCcRK1ld0M',\r\n    authDomain: 'whats-up-ce34e.firebaseapp.com',\r\n    projectId: 'whats-up-ce34e',\r\n    storageBucket: 'whats-up-ce34e.appspot.com',\r\n    messagingSenderId: '6258283268',\r\n    appId: '1:6258283268:web:91c3f62da6da184d583651',\r\n    measurementId: 'G-K13ZDZ04JX',\r\n}\r\n\r\nexport default function useFirebaseAuth(): [\r\n    firebase.User | null,\r\n    (method: SupportedAuthProvider) => void\r\n] {\r\n    const [user, setUser] = useLocalStorageState<firebase.User>('firebaseUser')\r\n    const [\r\n        githubProvider,\r\n        setGithubProvider,\r\n    ] = useState<firebase.auth.GithubAuthProvider | null>(null)\r\n    const [\r\n        googleProvider,\r\n        setGoogleProvider,\r\n    ] = useState<firebase.auth.GoogleAuthProvider | null>(null)\r\n\r\n    function showSignInPopup(method: SupportedAuthProvider) {\r\n        let selectedProvider\r\n        if (method === 'github' && githubProvider) {\r\n            selectedProvider = githubProvider\r\n        } else if (method === 'google' && googleProvider) {\r\n            selectedProvider = googleProvider\r\n        } else {\r\n            return\r\n        }\r\n\r\n        firebase\r\n            .auth()\r\n            .signInWithPopup(selectedProvider)\r\n            .catch((error) => {\r\n                console.error(`Unable to log in with error ${error}`)\r\n            })\r\n    }\r\n\r\n    async function createUserInFirebaseIfNonexistent(user: firebase.User) {\r\n        const snapshot = await firebase\r\n            .database()\r\n            .ref(`users/${user.uid}`)\r\n            .once('value')\r\n        if (snapshot.val()) {\r\n            await firebase.database().ref(`users/${user.uid}`).update({\r\n                userName: user.displayName,\r\n                photoURL: user.photoURL,\r\n            })\r\n        } else {\r\n            console.log(`User ${user.uid} does not exist. Creating now.`)\r\n            await firebase.database().ref(`users/${user.uid}`).set({\r\n                userName: user.displayName,\r\n                photoURL: user.photoURL,\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (firebase.apps.length === 0) {\r\n            firebase.initializeApp(config)\r\n        }\r\n        const githubProvider = new firebase.auth.GithubAuthProvider()\r\n        const googleProvider = new firebase.auth.GoogleAuthProvider()\r\n        setGithubProvider(githubProvider)\r\n        setGoogleProvider(googleProvider)\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                // log in\r\n                setUser(user)\r\n                createUserInFirebaseIfNonexistent(user)\r\n            } else {\r\n                // log out\r\n                setUser(null)\r\n            }\r\n        })\r\n        // Don't need to worry about setUser since it's the setter from useState\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return [user, showSignInPopup]\r\n}\r\n","import { SetStateAction } from 'react'\r\nimport { Dispatch, useEffect, useState } from 'react'\r\n\r\nexport default function useLocalStorageState<T = null>(\r\n    key: string\r\n): [T | null, Dispatch<SetStateAction<T | null>>] {\r\n    const [value, setValue] = useState<T | null>(() => {\r\n        const storedValue = localStorage.getItem(key)\r\n        const parsed = !!storedValue && JSON.parse(storedValue)\r\n        if (!parsed) {\r\n            return null\r\n        } else {\r\n            return parsed\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }, [key, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import InteractionCreator from \"./InteractionCreator\";\r\n\r\nexport default InteractionCreator","import * as React from 'react'\r\nimport { ClientUser } from '../../__shared__/types/user'\r\nimport { ClientUserStatuses } from '../../__shared__/types/userStatus'\r\nimport {\r\n    ConversationFormAction,\r\n    ConversationFormState,\r\n} from '../App/useConversationFormReducer'\r\nimport Avatar from '../Avatar'\r\nimport './InteractionCreator.scss'\r\n\r\ninterface Props {\r\n    userId: string | undefined\r\n    users: ClientUser[]\r\n    userStatuses: ClientUserStatuses\r\n    formState: ConversationFormState\r\n    dispatchForm: React.Dispatch<ConversationFormAction>\r\n}\r\n\r\nexport default function InteractionCreator(props: Props) {\r\n    function handlePersonSelect(e: React.ChangeEvent<HTMLInputElement>) {\r\n        e.preventDefault()\r\n        props.dispatchForm({\r\n            type: 'toggle_person',\r\n            payload: e.target.dataset.personid as string,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div id=\"InteractionCreator-root\">\r\n            <h4 style={{ marginTop: '0' }}>\r\n                Choose a conversation name (optional)\r\n            </h4>\r\n            <input\r\n                id=\"conversation-name-input\"\r\n                type=\"text\"\r\n                value={props.formState.newConversationName}\r\n                onChange={(e) =>\r\n                    props.dispatchForm({\r\n                        type: 'set_conversation_name',\r\n                        payload: e.currentTarget.value,\r\n                    })\r\n                }\r\n            ></input>\r\n\r\n            <h4>Select people to add *</h4>\r\n            <div>\r\n                {props.users\r\n                    .filter((user) => user.id !== props.userId)\r\n                    .map((user) => {\r\n                        return (\r\n                            <div\r\n                                key={`pselect-${user.id}`}\r\n                                className={'hover'}\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'left',\r\n                                    alignItems: 'center',\r\n                                    minWidth: '20px',\r\n                                    userSelect: 'none',\r\n                                    padding: '8px 16px',\r\n                                    border: '1px solid #737373',\r\n                                    borderRadius: '3px',\r\n                                    marginTop: '8px',\r\n                                    backgroundColor: props.formState.peopleForNewConversation.includes(\r\n                                        user.id\r\n                                    )\r\n                                        ? '#696969'\r\n                                        : undefined,\r\n                                }}\r\n                                data-personid={user.id}\r\n                                // @ts-ignore\r\n                                onClick={handlePersonSelect}\r\n                            >\r\n                                {user.photoURL && (\r\n                                    <Avatar\r\n                                        photoURL={user.photoURL}\r\n                                        badgeState={\r\n                                            props.userStatuses[user.id].state\r\n                                        }\r\n                                        style={{\r\n                                            marginRight: '8px',\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                                {user.userName}\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type { Props as InteractionCreatorProps }\r\n","import InteractionBar from './InteractionBar'\r\n\r\nexport default InteractionBar\r\n","import * as React from 'react'\r\nimport { ClientConversation } from '../../__shared__/models'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport Header from '../Header'\r\n\r\ninterface Props {\r\n    back: () => void\r\n    backIcon: string\r\n    conversation: ClientConversation\r\n}\r\n\r\nexport default function InteractionBar(props: Props) {\r\n    return (\r\n        <Header>\r\n            <div\r\n                onClick={props.back}\r\n                style={{\r\n                    display: 'flex',\r\n                    backgroundColor: 'black',\r\n                    color: 'white',\r\n                    borderRadius: '5px',\r\n                    cursor: 'pointer',\r\n                    padding: '8px 8px 8px 0',\r\n                }}\r\n            >\r\n                <FontAwesomeIcon icon={faArrowLeft} size={'lg'} />\r\n            </div>\r\n            <h3 style={{ marginLeft: '8px' }}>{props.conversation.name}</h3>\r\n        </Header>\r\n    )\r\n}\r\n","import * as React from 'react'\r\nimport firebase from 'firebase'\r\n\r\ninterface Props {\r\n    displayName: string\r\n    updateProfile: (\r\n        userInfo: Partial<Pick<firebase.UserInfo, 'displayName' | 'photoURL'>>\r\n    ) => void\r\n}\r\n\r\nexport function UserSettings(props: Props) {\r\n    const [newUsername, setNewUsername] = React.useState(props.displayName)\r\n\r\n    function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n        if (newUsername) {\r\n            props.updateProfile({\r\n                displayName: newUsername,\r\n            })\r\n        } else {\r\n            console.error('Username was not valid.')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n            }}\r\n        >\r\n            <form\r\n                style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    padding: '8px',\r\n                }}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        padding: '4px',\r\n                        marginBottom: '16px',\r\n                        flexDirection: 'column',\r\n                    }}\r\n                >\r\n                    <label\r\n                        htmlFor=\"username-input\"\r\n                        style={{ paddingBottom: '4px' }}\r\n                    >\r\n                        Username\r\n                    </label>\r\n                    <input\r\n                        id=\"username-input\"\r\n                        type=\"text\"\r\n                        placeholder=\"Type in the user name\"\r\n                        value={newUsername}\r\n                        onChange={(e) => setNewUsername(e.target.value)}\r\n                    ></input>\r\n                </div>\r\n                <input type=\"submit\" value=\"Save\"></input>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useReducer, Reducer } from 'react'\r\n\r\nexport type LayoutStateActionType =\r\n    | 'show_conversation_form'\r\n    | 'show_user_settings'\r\n    | 'select_conversation'\r\n    | 'return_to_main'\r\n\r\ninterface Action {\r\n    type: LayoutStateActionType\r\n}\r\n\r\ninterface State {\r\n    showConversationForm: boolean\r\n    showUserSettings: boolean\r\n}\r\n\r\nfunction layoutStateReducer(state: State, action: Action): State {\r\n    switch (action.type) {\r\n        case 'return_to_main':\r\n            return {\r\n                ...state,\r\n                showConversationForm: false,\r\n                showUserSettings: false,\r\n            }\r\n        case 'select_conversation':\r\n            return {\r\n                ...state,\r\n                showConversationForm: false,\r\n                showUserSettings: false,\r\n            }\r\n        case 'show_conversation_form':\r\n            return {\r\n                ...state,\r\n                showConversationForm: true,\r\n                showUserSettings: false,\r\n            }\r\n        case 'show_user_settings':\r\n            return {\r\n                ...state,\r\n                showConversationForm: false,\r\n                showUserSettings: true,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function useLayoutStateReducer(): [State, React.Dispatch<Action>] {\r\n    const [state, dispatch] = useReducer<Reducer<State, Action>>(\r\n        layoutStateReducer,\r\n        {\r\n            showConversationForm: false,\r\n            showUserSettings: false,\r\n        }\r\n    )\r\n\r\n    return [state, dispatch]\r\n}\r\n","import React from 'react'\r\nimport styles from './BottomSettings.module.scss'\r\n\r\ninterface Props {\r\n    logOut: () => void\r\n    openUserSettings: (\r\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n    ) => void\r\n}\r\n\r\nfunction BottomSettings(props: Props) {\r\n    return (\r\n        <div className={styles.root}>\r\n            {/* <button\r\n                onClick={props.openUserSettings}\r\n                style={{ marginBottom: '8px' }}\r\n            >\r\n                Edit User Settings\r\n            </button> */}\r\n            <button onClick={props.logOut}>Log Out</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BottomSettings\r\n","import React, { useReducer, Reducer } from 'react'\r\n\r\ntype ActionType = 'set_conversation_name' | 'toggle_person'\r\n\r\ninterface Action {\r\n    type: ActionType\r\n    payload: string\r\n}\r\n\r\ninterface State {\r\n    newConversationName: string\r\n    peopleForNewConversation: string[]\r\n}\r\n\r\nfunction conversationFormReducer(state: State, action: Action): State {\r\n    switch (action.type) {\r\n        case 'set_conversation_name':\r\n            return {\r\n                ...state,\r\n                newConversationName: action.payload,\r\n            }\r\n        case 'toggle_person':\r\n            if (state.peopleForNewConversation.includes(action.payload)) {\r\n                return {\r\n                    ...state,\r\n                    peopleForNewConversation: state.peopleForNewConversation.filter(\r\n                        (person) => person !== action.payload\r\n                    ),\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    peopleForNewConversation: [\r\n                        ...state.peopleForNewConversation,\r\n                        action.payload,\r\n                    ],\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport function useConversationFormReducer(): [State, React.Dispatch<Action>] {\r\n    const [state, dispatch] = useReducer<Reducer<State, Action>>(\r\n        conversationFormReducer,\r\n        {\r\n            newConversationName: '',\r\n            peopleForNewConversation: [],\r\n        }\r\n    )\r\n\r\n    return [state, dispatch]\r\n}\r\n\r\nexport type { State as ConversationFormState }\r\nexport type { Action as ConversationFormAction }\r\n","import React from 'react'\r\nimport './styles.scss'\r\nimport '../../__shared__/styles.scss'\r\nimport ChatPreview from '../ChatPreview'\r\nimport HomeToolbar from '../HomeHeader'\r\nimport Interaction from '../Interaction'\r\nimport InteractionMessageEditor from '../InteractionMessageEditor'\r\nimport { ChatsLayout as HomeLayout, InteractionLayout } from './layouts'\r\nimport withAuth from '../../__shared__/auth/withAuth'\r\nimport firebase from 'firebase'\r\nimport InteractionCreator from '../InteractionCreator'\r\nimport { useConversation } from '../../__shared__/hooks/useConversation'\r\nimport { useWindowSize } from '../../__shared__/hooks/useWindowSize'\r\nimport InteractionBar from '../InteractionBar'\r\nimport { UserSettings } from '../UserSettings'\r\nimport { ClientConversation } from '../../__shared__/models'\r\nimport {\r\n    LayoutStateActionType,\r\n    useLayoutStateReducer,\r\n} from './useLayoutStateReducer'\r\nimport { useUsers } from './useUsers'\r\nimport BottomSettings from '../BottomSettings'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport Header from '../Header'\r\nimport { useConversationFormReducer } from './useConversationFormReducer'\r\n\r\ntype ConversationIdDispatchValue<\r\n    T extends LayoutStateActionType\r\n> = T extends 'select_conversation'\r\n    ? {\r\n          conversationId: string\r\n      }\r\n    : {\r\n          conversationId?: never\r\n      }\r\n\r\ntype DispatchWithConversationAction<T extends LayoutStateActionType> = {\r\n    type: T\r\n} & ConversationIdDispatchValue<T>\r\n\r\ninterface AppProps {\r\n    user: firebase.User | null\r\n}\r\n\r\nfunction App(props: AppProps) {\r\n    const appInitiated = firebase.apps.length > 0\r\n\r\n    const {\r\n        messages,\r\n        conversations,\r\n        conversationId,\r\n        setConversationId,\r\n    } = useConversation(appInitiated, props.user?.uid)\r\n    const currentConversation = conversationId\r\n        ? (conversations.find(\r\n              (c) => c.id === conversationId\r\n          ) as ClientConversation)\r\n        : null\r\n\r\n    const [users, userStatuses] = useUsers(appInitiated, props.user?.uid)\r\n\r\n    const windowSize = useWindowSize()\r\n\r\n    const [currentDraft, setCurrentDraft] = React.useState('')\r\n\r\n    const [layoutState, layoutStateDispatch] = useLayoutStateReducer()\r\n\r\n    const [\r\n        conversationFormState,\r\n        dispatchConversationForm,\r\n    ] = useConversationFormReducer()\r\n\r\n    function handlePreviewSelect(id: string) {\r\n        dispatchWithConversationId({\r\n            type: 'select_conversation',\r\n            conversationId: id,\r\n        })\r\n    }\r\n\r\n    function dispatchWithConversationId<T extends LayoutStateActionType>(\r\n        action: DispatchWithConversationAction<T>\r\n    ) {\r\n        layoutStateDispatch({ type: action.type })\r\n        setConversationId(action.conversationId || null)\r\n    }\r\n\r\n    function handleMessageChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        e.preventDefault()\r\n        setCurrentDraft(e.target.value)\r\n    }\r\n\r\n    async function createConversation() {\r\n        if (!props.user) {\r\n            console.error('not logged in')\r\n            return\r\n        } else if (\r\n            conversationFormState.peopleForNewConversation.length === 0\r\n        ) {\r\n            console.error('no friends to add')\r\n            return\r\n        }\r\n\r\n        try {\r\n            const db = firebase.database()\r\n\r\n            // Check if friendIds are valid\r\n            const friendSnapshots = await Promise.all(\r\n                conversationFormState.peopleForNewConversation.map(\r\n                    (personId) => {\r\n                        return db.ref(`users/${personId}`).once('value')\r\n                    }\r\n                )\r\n            )\r\n\r\n            for (let snapshot of friendSnapshots) {\r\n                if (!snapshot.val()) {\r\n                    alert(`Friend ID ${snapshot.key} does not exist.`)\r\n                    return\r\n                }\r\n            }\r\n\r\n            // Create new conversation\r\n            const conversationRef = await db.ref(`conversations`).push()\r\n            const conversationId = conversationRef.key\r\n\r\n            await conversationRef.set({\r\n                createdAt: firebase.database.ServerValue.TIMESTAMP,\r\n                creatorId: props.user.uid,\r\n                name: conversationFormState.newConversationName,\r\n            })\r\n\r\n            const everythingElse: Record<string, any> = {}\r\n\r\n            // For self\r\n            everythingElse[\r\n                `userConversations/${props.user.uid}/${conversationId}`\r\n            ] = {\r\n                invitedBy: props.user.uid,\r\n            }\r\n            everythingElse[\r\n                `conversationUsers/${conversationId}/${props.user.uid}`\r\n            ] = {\r\n                invitedBy: props.user.uid,\r\n                userName: props.user.displayName,\r\n            }\r\n\r\n            // For friends\r\n            friendSnapshots.forEach((snapshot) => {\r\n                everythingElse[\r\n                    `userConversations/${snapshot.key}/${conversationId}`\r\n                ] = {\r\n                    invitedBy: props.user?.uid,\r\n                }\r\n                everythingElse[\r\n                    `conversationUsers/${conversationId}/${snapshot.key}`\r\n                ] = {\r\n                    invitedBy: props.user?.uid,\r\n                    userName: snapshot.child('userName').val() || '',\r\n                }\r\n            })\r\n\r\n            await db.ref().update(everythingElse)\r\n\r\n            if (conversationId) {\r\n                dispatchWithConversationId({\r\n                    type: 'select_conversation',\r\n                    conversationId,\r\n                })\r\n            }\r\n        } catch (outerError) {\r\n            alert(`something went wrong: ${outerError}`)\r\n        }\r\n    }\r\n\r\n    async function createMessage(\r\n        e: React.MouseEvent<HTMLInputElement, MouseEvent>\r\n    ) {\r\n        e.preventDefault()\r\n\r\n        if (!props.user || !appInitiated) {\r\n            console.error('not logged in')\r\n            return\r\n        }\r\n\r\n        const message = {\r\n            sender: props.user.uid,\r\n            senderName: props.user.displayName || '',\r\n            createdAt: firebase.database.ServerValue.TIMESTAMP,\r\n            content: currentDraft,\r\n            photoURL: props.user.photoURL,\r\n        }\r\n\r\n        const newMessageRef = await firebase\r\n            .database()\r\n            .ref(`messages/${conversationId}`)\r\n            .push()\r\n        newMessageRef.set(message, (error) => {\r\n            if (error) {\r\n                alert(`something went wrong... ${error}`)\r\n            } else {\r\n                setCurrentDraft('')\r\n            }\r\n        })\r\n    }\r\n\r\n    function logOut() {\r\n        firebase\r\n            .auth()\r\n            .signOut()\r\n            .catch((e) => {\r\n                window.alert(`Unable to sign out with error ${e}`)\r\n            })\r\n    }\r\n\r\n    function openConversationForm(\r\n        e: React.MouseEvent<HTMLInputElement, MouseEvent>\r\n    ) {\r\n        e.preventDefault()\r\n        dispatchWithConversationId({ type: 'show_conversation_form' })\r\n    }\r\n\r\n    function openUserSettings(\r\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n    ) {\r\n        e.preventDefault()\r\n        dispatchWithConversationId({ type: 'show_user_settings' })\r\n    }\r\n\r\n    function updateUserProfile(\r\n        userInfo: Partial<Pick<firebase.UserInfo, 'displayName' | 'photoURL'>>\r\n    ) {\r\n        props.user?.updateProfile(userInfo).catch((error) => {\r\n            alert(`user profile not updated with error ${error}`)\r\n        })\r\n    }\r\n\r\n    function returnToMain() {\r\n        dispatchWithConversationId({ type: 'return_to_main' })\r\n    }\r\n\r\n    const showInteractionLayout =\r\n        windowSize !== 'xs' ||\r\n        (windowSize === 'xs' &&\r\n            (conversationId ||\r\n                layoutState.showConversationForm ||\r\n                layoutState.showUserSettings))\r\n    const showHomeLayout =\r\n        windowSize !== 'xs' ||\r\n        (windowSize === 'xs' &&\r\n            !conversationId &&\r\n            !layoutState.showConversationForm &&\r\n            !layoutState.showUserSettings)\r\n\r\n    return (\r\n        <div id=\"app-root\">\r\n            {showHomeLayout && (\r\n                <HomeLayout>\r\n                    <HomeToolbar\r\n                        user={props.user}\r\n                        userState={\r\n                            props.user && userStatuses[props.user.uid]?.state\r\n                        }\r\n                    />\r\n                    <div\r\n                        onClick={openConversationForm}\r\n                        className=\"hover\"\r\n                        style={{\r\n                            margin: '16px 0',\r\n                            padding: '8px 16px',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                        }}\r\n                    >\r\n                        New conversation\r\n                        <div\r\n                            style={{\r\n                                display: 'flex',\r\n                                height: '32px',\r\n                                width: '32px',\r\n                                backgroundColor: 'black',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'center',\r\n                                color: 'white',\r\n                                borderRadius: '5px',\r\n                                marginLeft: '8px',\r\n                            }}\r\n                        >\r\n                            <FontAwesomeIcon icon={faPlusCircle} size={'sm'} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            height: '100%',\r\n                            padding: '0px 0px 16px',\r\n                        }}\r\n                    >\r\n                        <div>\r\n                            <div\r\n                                style={{\r\n                                    overflow: 'auto',\r\n                                }}\r\n                            >\r\n                                {conversations.map((convo) => (\r\n                                    <ChatPreview\r\n                                        key={convo.id}\r\n                                        conversation={convo}\r\n                                        onPreviewClick={handlePreviewSelect}\r\n                                    />\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <BottomSettings\r\n                        logOut={logOut}\r\n                        openUserSettings={openUserSettings}\r\n                    />\r\n                </HomeLayout>\r\n            )}\r\n\r\n            {showInteractionLayout && (\r\n                <InteractionLayout>\r\n                    {currentConversation && props.user ? (\r\n                        <>\r\n                            <InteractionBar\r\n                                backIcon={windowSize === 'xs' ? '<' : 'X'}\r\n                                back={returnToMain}\r\n                                conversation={currentConversation}\r\n                            />\r\n                            <Interaction\r\n                                userId={props.user.uid}\r\n                                conversation={currentConversation}\r\n                                messages={messages}\r\n                                statuses={userStatuses}\r\n                            />\r\n                            <InteractionMessageEditor\r\n                                // userId={props.user.uid}\r\n                                currentDraft={currentDraft}\r\n                                handleMessageChange={handleMessageChange}\r\n                                handleSend={createMessage}\r\n                            />\r\n                        </>\r\n                    ) : layoutState.showConversationForm ? (\r\n                        <>\r\n                            <Header>\r\n                                <div\r\n                                    onClick={returnToMain}\r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        backgroundColor: 'black',\r\n                                        color: 'white',\r\n                                        borderRadius: '5px',\r\n                                        cursor: 'pointer',\r\n                                        padding: '8px 8px 8px 0',\r\n                                    }}\r\n                                >\r\n                                    <FontAwesomeIcon\r\n                                        icon={faArrowLeft}\r\n                                        size={'lg'}\r\n                                    />\r\n                                </div>\r\n                                <h3 style={{ marginLeft: '8px' }}>\r\n                                    New conversation\r\n                                </h3>\r\n                                <div\r\n                                    onClick={createConversation}\r\n                                    style={{\r\n                                        cursor: 'pointer',\r\n                                        padding: '8px 0 8px 8px',\r\n                                        marginLeft: 'auto',\r\n                                    }}\r\n                                >\r\n                                    Create\r\n                                </div>\r\n                            </Header>\r\n                            <InteractionCreator\r\n                                userId={props.user?.uid}\r\n                                users={users}\r\n                                userStatuses={userStatuses}\r\n                                formState={conversationFormState}\r\n                                dispatchForm={dispatchConversationForm}\r\n                            />\r\n                        </>\r\n                    ) : layoutState.showUserSettings ? (\r\n                        <UserSettings\r\n                            displayName={props.user?.displayName || ''}\r\n                            updateProfile={updateUserProfile}\r\n                        />\r\n                    ) : null}\r\n                </InteractionLayout>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuth(App)\r\n","import * as React from 'react'\r\nimport { SignIn } from '../../components/SignIn'\r\nimport useFirebaseAuth from './useFirebaseAuth'\r\n\r\nexport default function withAuth(WrappedComponent: React.ElementType) {\r\n    return function Hoc(props: Record<string, unknown>) {\r\n        const [user, showSignInPopup] = useFirebaseAuth()\r\n\r\n        return user ? (\r\n            <WrappedComponent user={user} {...props} />\r\n        ) : (\r\n            <SignIn showSignInPopup={showSignInPopup} />\r\n        )\r\n    }\r\n}\r\n","import App from './App'\r\n\r\nexport default App\r\n","import React, { useState, useEffect } from 'react'\r\nimport firebase from 'firebase'\r\nimport { ClientConversation, ClientMessage, ServerMessage } from '../models'\r\n\r\n/**\r\n * The primary hook of the app. Fetches and listens to conversation and message data\r\n */\r\nexport function useConversation(\r\n    initialized: boolean,\r\n    userId?: string\r\n): {\r\n    messages: ClientMessage[]\r\n    conversations: ClientConversation[]\r\n    conversationId: string | null\r\n    setConversationId: React.Dispatch<React.SetStateAction<string | null>>\r\n} {\r\n    const [conversations, setConversations] = useState<ClientConversation[]>([])\r\n    const [conversationId, setConversationId] = useState<string | null>(null)\r\n    const [messages, setMessages] = useState<ClientMessage[]>([])\r\n\r\n    /**\r\n     * Pull conversations, userConversations, and conversationUsers.\r\n     * Also listens to new conversations.\r\n     */\r\n    useEffect(() => {\r\n        try {\r\n            if (!initialized || !userId) {\r\n                return\r\n            }\r\n\r\n            const db = firebase.database()\r\n\r\n            const userConversationsRefString = `userConversations/${userId}`\r\n            const userConversationsRef = db.ref(userConversationsRefString)\r\n\r\n            // What I need to do next is display a list of conversations in the UI that the user has access to.\r\n            // I need to use a combination of userConversations and conversations.\r\n            // userConversations for knowing which user has access to what conversation,\r\n            // and conversations for getting the metadata of conversations,\r\n            // then conversationUsers to know who is in the conversation.\r\n\r\n            ;(async () => {\r\n                const userConversationsOnce = await userConversationsRef\r\n                    .orderByKey()\r\n                    .once('value')\r\n                const initialConversations: ClientConversation[] = []\r\n                let lastInitialUserConversationId = ''\r\n                if (userConversationsOnce.exists()) {\r\n                    const convoPromises: Promise<firebase.database.DataSnapshot>[] = []\r\n                    const cuPromises: Promise<firebase.database.DataSnapshot>[] = []\r\n\r\n                    userConversationsOnce.forEach((uc) => {\r\n                        convoPromises.push(\r\n                            db\r\n                                .ref(`conversations/${uc.key}`)\r\n                                .orderByKey()\r\n                                .once('value')\r\n                        )\r\n                        cuPromises.push(\r\n                            db\r\n                                .ref(`conversationUsers/${uc.key}`)\r\n                                .orderByKey()\r\n                                .once('value')\r\n                        )\r\n                    })\r\n\r\n                    const convoResolved = await Promise.all(convoPromises)\r\n                    const cuResolved = await Promise.all(cuPromises)\r\n\r\n                    // Loop through each conversation the logged in user is a part of\r\n                    // to create a ClientConversation for each conversation.\r\n                    userConversationsOnce.forEach((uc) => {\r\n                        if (!uc.key) {\r\n                            return\r\n                        }\r\n                        const convo: ClientConversation = {\r\n                            id: uc.key,\r\n                            otherUsers: [],\r\n                            name: '',\r\n                        }\r\n                        // Check if conversation keys match\r\n                        const matchedConversation = convoResolved.find(\r\n                            (cor) => cor.ref.key === uc.key\r\n                        )\r\n                        const matchedConversationUsers = cuResolved.find(\r\n                            (cur) => cur.ref.key === uc.key\r\n                        )\r\n\r\n                        // Add name to convo\r\n                        if (matchedConversation) {\r\n                            convo.name = matchedConversation.val().name\r\n                        }\r\n\r\n                        // Add other users to the ClientConversation.\r\n                        if (matchedConversationUsers) {\r\n                            matchedConversationUsers.forEach(\r\n                                (conversationUser) => {\r\n                                    if (\r\n                                        conversationUser.key &&\r\n                                        conversationUser.key !== userId\r\n                                    ) {\r\n                                        convo.otherUsers.push({\r\n                                            id: conversationUser.key,\r\n                                            userName: conversationUser\r\n                                                .child('userName')\r\n                                                .val(),\r\n                                        })\r\n                                    }\r\n                                }\r\n                            )\r\n                        }\r\n\r\n                        initialConversations.push(convo)\r\n                    })\r\n\r\n                    setConversations(initialConversations)\r\n\r\n                    lastInitialUserConversationId =\r\n                        initialConversations.length > 0\r\n                            ? initialConversations[\r\n                                  initialConversations.length - 1\r\n                              ].id\r\n                            : ''\r\n                } else {\r\n                    setConversations([])\r\n                    setConversationId(null)\r\n                }\r\n\r\n                userConversationsRef\r\n                    .orderByKey()\r\n                    .startAfter(lastInitialUserConversationId)\r\n                    .on(\r\n                        'child_added',\r\n                        (userConversationSnapshot, previousChildKey) => {\r\n                            // userConversationSnapshot.key is a new conversation key\r\n                            const ucKey = userConversationSnapshot.key\r\n                            if (!ucKey) {\r\n                                return\r\n                            }\r\n                            const convo: ClientConversation = {\r\n                                id: ucKey,\r\n                                otherUsers: [],\r\n                                name: '',\r\n                            }\r\n                            db.ref(`conversations/${ucKey}`)\r\n                                .orderByKey()\r\n                                .once('value')\r\n                                .then((conversation) => {\r\n                                    convo.name = conversation.val().name\r\n                                    db.ref(`conversationUsers/${ucKey}`)\r\n                                        .orderByKey()\r\n                                        .once('value')\r\n                                        .then((newConversationUsers) => {\r\n                                            newConversationUsers.forEach(\r\n                                                (ncu) => {\r\n                                                    if (\r\n                                                        ncu.key &&\r\n                                                        ncu.key !== userId\r\n                                                    ) {\r\n                                                        convo.otherUsers.push({\r\n                                                            id: ncu.key,\r\n                                                            userName: ncu\r\n                                                                .child(\r\n                                                                    'userName'\r\n                                                                )\r\n                                                                .val(),\r\n                                                        })\r\n                                                    }\r\n                                                }\r\n                                            )\r\n                                            setConversations((prev) => [\r\n                                                ...prev,\r\n                                                convo,\r\n                                            ])\r\n                                        })\r\n                                })\r\n                        }\r\n                    )\r\n            })()\r\n\r\n            return () => {\r\n                userConversationsRef.off('child_added')\r\n            }\r\n        } catch (e) {\r\n            console.error(e)\r\n            return\r\n        }\r\n    }, [initialized, userId])\r\n\r\n    /**\r\n     * Pulls messages, and listens to new ones.\r\n     */\r\n    useEffect(() => {\r\n        try {\r\n            if (!initialized || !userId || !conversationId) {\r\n                return\r\n            }\r\n\r\n            const db = firebase.database()\r\n            const messagesRefString = `messages/${conversationId}`\r\n            const messagesRef = db.ref(messagesRefString)\r\n\r\n            ;(async () => {\r\n                const messagesOnce = await messagesRef\r\n                    .orderByKey()\r\n                    .once('value')\r\n                const initialMessages: ClientMessage[] = []\r\n\r\n                if (messagesOnce.exists()) {\r\n                    messagesOnce.forEach((m) => {\r\n                        if (m.key) {\r\n                            const serverMessage = m.toJSON() as ServerMessage\r\n                            initialMessages.push({\r\n                                ...serverMessage,\r\n                                id: m.key,\r\n                            })\r\n                        }\r\n                    })\r\n                    setMessages(initialMessages)\r\n                } else {\r\n                    setMessages([])\r\n                }\r\n\r\n                const lastInitialMessageId: string =\r\n                    initialMessages.length > 0\r\n                        ? initialMessages[initialMessages.length - 1].id\r\n                        : ''\r\n                messagesRef\r\n                    .orderByKey()\r\n                    .startAfter(lastInitialMessageId)\r\n                    .on('child_added', (messageSnapshot, previousChildKey) => {\r\n                        if (messageSnapshot.key) {\r\n                            const serverMessage = messageSnapshot.toJSON() as ServerMessage\r\n                            const clientMessage: ClientMessage = {\r\n                                ...serverMessage,\r\n                                id: messageSnapshot.key,\r\n                            }\r\n                            setMessages((prev) => [...prev, clientMessage])\r\n                        }\r\n                    })\r\n            })()\r\n\r\n            return () => {\r\n                messagesRef.off('child_added')\r\n            }\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }, [initialized, userId, conversationId])\r\n\r\n    return {\r\n        messages,\r\n        conversations,\r\n        conversationId,\r\n        setConversationId,\r\n    }\r\n}\r\n","import * as React from 'react'\r\nimport firebase from 'firebase'\r\nimport {\r\n    ServerUserStatus,\r\n    ClientUserStatuses,\r\n} from '../../__shared__/types/userStatus'\r\nimport { ClientUser } from '../../__shared__/types/user'\r\n\r\nexport function useUsers(\r\n    initialized: boolean,\r\n    userId: string | undefined\r\n): [ClientUser[], ClientUserStatuses] {\r\n    const [statuses, setStatuses] = React.useState<ClientUserStatuses>({})\r\n    const [users, setUsers] = React.useState<ClientUser[]>([])\r\n\r\n    /**\r\n     * Updates the logged-in user's status in the database.\r\n     */\r\n    React.useEffect(() => {\r\n        if (!initialized || !userId) {\r\n            return\r\n        }\r\n\r\n        const db = firebase.database()\r\n        const userStatusDatabaseRef = db.ref('/status/' + userId)\r\n        const infoConnectedRef = db.ref('.info/connected')\r\n\r\n        // The below is from firebase docs\r\n\r\n        const isOfflineForDatabase: ServerUserStatus = {\r\n            state: 'offline',\r\n            lastChanged: firebase.database.ServerValue.TIMESTAMP,\r\n        }\r\n\r\n        const isOnlineForDatabase: ServerUserStatus = {\r\n            state: 'online',\r\n            lastChanged: firebase.database.ServerValue.TIMESTAMP,\r\n        }\r\n\r\n        // Create a reference to the special '.info/connected' path in\r\n        // Realtime Database. This path returns `true` when connected\r\n        // and `false` when disconnected.\r\n        infoConnectedRef.on('value', function (snapshot) {\r\n            // If we're not currently connected, don't do anything.\r\n            if (!snapshot.val()) {\r\n                return\r\n            }\r\n\r\n            // If we are currently connected, then use the 'onDisconnect()'\r\n            // method to add a set which will only trigger once this\r\n            // client has disconnected by closing the app,\r\n            // losing internet, or any other means.\r\n            userStatusDatabaseRef\r\n                .onDisconnect()\r\n                .set(isOfflineForDatabase)\r\n                .then(function () {\r\n                    // The promise returned from .onDisconnect().set() will\r\n                    // resolve as soon as the server acknowledges the onDisconnect()\r\n                    // request, NOT once we've actually disconnected:\r\n                    // https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect\r\n\r\n                    // We can now safely set ourselves as 'online' knowing that the\r\n                    // server will mark us as offline once we lose connection.\r\n                    userStatusDatabaseRef.set(isOnlineForDatabase)\r\n                })\r\n        })\r\n\r\n        return () => {\r\n            infoConnectedRef.off('value')\r\n        }\r\n    }, [initialized, userId])\r\n\r\n    /**\r\n     * Reads and listens to statuses for all users.\r\n     */\r\n    React.useEffect(() => {\r\n        if (!initialized) {\r\n            return\r\n        }\r\n\r\n        const db = firebase.database()\r\n        const statusRef = db.ref('/status')\r\n\r\n        ;(async () => {\r\n            let lastStatusKey = ''\r\n            const newStatuses: ClientUserStatuses = {}\r\n\r\n            const statusResolved = await db\r\n                .ref('/status')\r\n                .orderByKey()\r\n                .once('value')\r\n            statusResolved.forEach((data) => {\r\n                if (data.key) {\r\n                    lastStatusKey = data.key\r\n                    newStatuses[data.key] = {\r\n                        state: data.child('state').val(),\r\n                        lastChanged: data.child('lastChanged').val(),\r\n                    }\r\n                }\r\n            })\r\n            setStatuses(newStatuses)\r\n\r\n            statusRef.startAfter(lastStatusKey).on('child_added', (data) => {\r\n                const key = data.key\r\n                if (key) {\r\n                    setStatuses((prev) => ({\r\n                        ...prev,\r\n                        [key]: {\r\n                            state: data.child('state').val(),\r\n                            lastChanged: data.child('lastChanged').val(),\r\n                        },\r\n                    }))\r\n                }\r\n            })\r\n\r\n            statusRef.on('child_changed', (data) => {\r\n                const key = data.key\r\n                if (key) {\r\n                    setStatuses((prev) => ({\r\n                        ...prev,\r\n                        [key]: {\r\n                            state: data.child('state').val(),\r\n                            lastChanged: data.child('lastChanged').val(),\r\n                        },\r\n                    }))\r\n                }\r\n            })\r\n        })()\r\n\r\n        return () => {\r\n            statusRef.off('child_added')\r\n            statusRef.off('child_changed')\r\n        }\r\n    }, [initialized])\r\n\r\n    /**\r\n     * Reads and listens to users.\r\n     */\r\n    React.useEffect(() => {\r\n        if (!initialized) {\r\n            return\r\n        }\r\n\r\n        const db = firebase.database()\r\n        const usersRef = db.ref('/users')\r\n\r\n        ;(async () => {\r\n            let lastUserKey = ''\r\n            const newUsers: ClientUser[] = []\r\n\r\n            const usersResolved = await db\r\n                .ref('/users')\r\n                .orderByKey()\r\n                .once('value')\r\n            usersResolved.forEach((data) => {\r\n                if (data.key) {\r\n                    lastUserKey = data.key\r\n                    newUsers.push({\r\n                        id: data.key,\r\n                        userName: data.child('userName').val(),\r\n                        photoURL: data.child('photoURL').val(),\r\n                    })\r\n                }\r\n            })\r\n            setUsers(newUsers)\r\n\r\n            usersRef.startAfter(lastUserKey).on('child_added', (data) => {\r\n                const key = data.key\r\n                if (key) {\r\n                    setUsers((prev) => [\r\n                        ...prev,\r\n                        {\r\n                            id: key,\r\n                            userName: data.child('userName').val(),\r\n                            photoURL: data.child('photoURL').val(),\r\n                        },\r\n                    ])\r\n                }\r\n            })\r\n\r\n            usersRef.on('child_changed', (data) => {\r\n                const key = data.key\r\n                if (key) {\r\n                    setUsers((prev) => {\r\n                        const newUsers = [...prev]\r\n                        const changedUser = newUsers.find(\r\n                            (user) => user.id === key\r\n                        )\r\n                        if (changedUser) {\r\n                            changedUser.userName = data.child('userName').val()\r\n                            changedUser.photoURL = data.child('photoURL').val()\r\n                        }\r\n                        return newUsers\r\n                    })\r\n                }\r\n            })\r\n        })()\r\n\r\n        return () => {\r\n            usersRef.off('child_added')\r\n            usersRef.off('child_changed')\r\n        }\r\n    }, [initialized])\r\n\r\n    return [users, statuses]\r\n}\r\n","import { useState, useEffect } from 'react'\r\n\r\nexport type WindowSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl'\r\n\r\n// Initially based on https://usehooks.com/useWindowSize/\r\nexport function useWindowSize(): WindowSize | undefined {\r\n    const [windowSize, setWindowSize] = useState<WindowSize | undefined>()\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            const width = window.innerWidth\r\n            if (width >= 1920) {\r\n                setWindowSize('xl')\r\n            } else if (width >= 1280) {\r\n                setWindowSize('lg')\r\n            } else if (width >= 960) {\r\n                setWindowSize('md')\r\n            } else if (width >= 700) {\r\n                setWindowSize('sm')\r\n            } else {\r\n                setWindowSize('xs')\r\n            }\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize)\r\n\r\n        handleResize()\r\n\r\n        return () => window.removeEventListener('resize', handleResize)\r\n    }, [])\r\n\r\n    return windowSize\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://cra.link/PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error)\r\n        })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister()\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './components/App'\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register()\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}