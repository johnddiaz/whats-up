{"version":3,"sources":["components/Avatar/Avatar.module.scss","components/ChatPreview/ChatPreview.module.scss","components/Header/Header.module.scss","components/BottomSettings/BottomSettings.module.scss","components/ChatPreview/index.tsx","components/ChatPreview/ChatPreview.tsx","components/Avatar/Avatar.tsx","components/Header/Header.tsx","components/HomeHeader/index.tsx","components/HomeHeader/HomeHeader.tsx","components/InteractionMessage/index.tsx","components/InteractionMessage/InteractionMessage.tsx","__shared__/utils/dateTime.ts","components/Interaction/index.tsx","components/Interaction/Interaction.tsx","components/InteractionMessageEditor/index.tsx","components/InteractionMessageEditor/InteractionMessageEditor.tsx","components/App/layouts.tsx","components/SignIn/SignIn.tsx","__shared__/auth/useFirebaseAuth.ts","__shared__/utils/useLocalStorageState.ts","components/InteractionCreator/index.ts","components/InteractionCreator/InteractionCreator.tsx","components/InteractionBar/index.tsx","components/InteractionBar/InteractionBar.tsx","components/UserSettings/UserSettings.tsx","components/App/useLayoutStateReducer.ts","components/BottomSettings/BottomSettings.tsx","components/App/useConversationFormReducer.ts","__shared__/models/conversations.ts","__shared__/models/messages.ts","__shared__/auth/utils.ts","components/App/App.tsx","__shared__/auth/withAuth.tsx","components/App/index.tsx","__shared__/hooks/useConversation.ts","components/App/useUsers.ts","__shared__/hooks/useWindowSize.ts","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","ChatPreview","props","className","styles","root","onClick","onPreviewClick","conversation","id","textRoot","style","margin","name","otherUsers","length","map","user","index","original","userName","Avatar","avatarDimensions","size","height","width","badgeDimensions","marginTop","marginLeft","src","photoURL","alt","img","badgeState","badge","backgroundColor","Header","children","HomeHeader","userState","fontSize","InteractionMessage","React","showTime","setShowTime","personClass","isSender","placementClass","borderStyling","squishAbove","squishBelow","console","log","message","createdAt","ref","newestMessageRef","display","flexDirection","undefined","showName","marginBottom","textAlign","senderName","alignSelf","side","avatarProps","marginRight","spacePlaceholder","whiteSpace","prev","content","Date","toLocaleString","MILLIS_IN_SEC","MILLIS_IN_HOUR","convertToMillis","days","hours","mins","secs","millis","runningVal","convertToSecs","Interaction","current","scrollIntoView","behavior","messages","styling","reduce","previousStyling","currentMessage","arr","currentMessageSeconds","sender","messagesWithoutAvatar","now","dayFormatter","Intl","DateTimeFormat","weekday","monthFormatter","month","userId","userStatus","statuses","currentDate","showTimelineAboveMessage","pastDate","toDateString","getTime","getHours","minutes","getMinutes","timelineDay","timelineTime","nowOffset","getSeconds","getMilliseconds","format","getDate","avatarAvailable","state","renderMessagesTimeline","InteractionMessageEditor","onChange","handleMessageChange","value","currentDraft","type","handleSend","ChatsLayout","flexGrow","flexBasis","maxWidth","InteractionLayout","SignIn","alignItems","justifyContent","showSignInPopup","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","useFirebaseAuth","key","useState","storedValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","useLocalStorageState","setUser","githubProvider","setGithubProvider","googleProvider","setGoogleProvider","a","firebase","database","uid","once","val","update","displayName","set","apps","initializeApp","auth","GithubAuthProvider","GoogleAuthProvider","onAuthStateChanged","createUserInFirebaseIfNonexistent","method","selectedProvider","signInWithPopup","catch","error","InteractionCreator","handlePersonSelect","e","preventDefault","dispatchForm","payload","target","dataset","personid","formState","newConversationName","currentTarget","users","filter","minWidth","userSelect","padding","border","borderRadius","peopleForNewConversation","includes","data-personid","userStatuses","InteractionBar","back","color","cursor","icon","faArrowLeft","UserSettings","newUsername","setNewUsername","onSubmit","updateProfile","htmlFor","paddingBottom","placeholder","layoutStateReducer","action","showConversationForm","showUserSettings","BottomSettings","logOut","conversationFormReducer","person","createConversation","conversationData","peopleToAdd","db","Promise","all","personId","friendSnapshots","snapshot","alert","push","conversationRef","conversationId","ServerValue","TIMESTAMP","creatorId","everythingElse","invitedBy","forEach","child","createMessage","messageText","newMessageRef","signOut","withAuth","WrappedComponent","App","appInitiated","initialized","conversations","setConversations","setConversationId","setMessages","userConversationsRefString","userConversationsRef","orderByKey","userConversationsOnce","initialConversations","lastInitialUserConversationId","exists","convoPromises","cuPromises","uc","convoResolved","cuResolved","convo","matchedConversation","find","cor","matchedConversationUsers","cur","conversationUser","startAfter","on","userConversationSnapshot","previousChildKey","ucKey","then","newConversationUsers","ncu","off","messagesRefString","messagesRef","messagesOnce","initialMessages","m","serverMessage","toJSON","lastInitialMessageId","messageSnapshot","clientMessage","useConversation","currentConversation","c","setStatuses","setUsers","userStatusDatabaseRef","infoConnectedRef","isOfflineForDatabase","lastChanged","isOnlineForDatabase","onDisconnect","statusRef","lastStatusKey","newStatuses","data","usersRef","lastUserKey","newUsers","changedUser","useUsers","windowSize","calculateWindowSize","window","innerWidth","setWindowSize","windowWidth","handleResize","addEventListener","removeEventListener","useWindowSize","setCurrentDraft","useReducer","useLayoutStateReducer","layoutState","layoutStateDispatch","useConversationFormReducer","conversationFormState","dispatchConversationForm","handlePreviewSelect","dispatchWithConversationId","returnToMain","showInteractionLayout","showHomeLayout","faPlusCircle","overflow","openUserSettings","backIcon","userInfo","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,KAAO,qBAAqB,IAAM,oBAAoB,MAAQ,wB,mBCAhFD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,SAAW,gC,wCCA9DD,EAAOC,QAAU,CAAC,KAAO,uB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,+B,uRCCVC,MCQA,SAAqBC,GAKhC,OACI,qBAAKC,UAAWC,IAAOC,KAAMC,QALjC,WACIJ,EAAMK,eAAeL,EAAMM,aAAaC,KAIxC,SACI,sBAAKN,UAAWC,IAAOM,SAAvB,UACI,oBAAIC,MAAO,CAAEC,OAAQ,WAArB,SACKV,EAAMM,aAAaK,MAAQX,EAAMM,aAAaC,KAEnD,mBAAGE,MAAO,CAAEC,OAAQ,KAApB,SACKV,EAAMM,aAAaM,WAAWC,OAAS,EAClCb,EAAMM,aAAaM,WAAWE,KAC1B,SAACC,EAAMC,EAAOC,GACV,OACwB,IAApBA,EAASJ,QACTG,IAAUC,EAASJ,OAAS,EAErBE,EAAKG,UAAYH,EAAKR,GAEvB,GAAN,OAAUQ,EAAKG,UAAYH,EAAKR,GAAhC,SAIZ,yB,wBCxBX,SAASY,EAAOnB,GAC3B,IAAMoB,EACa,OAAfpB,EAAMqB,KACA,CACIC,OAAQ,OACRC,MAAO,QAEX,CACID,OAAQ,OACRC,MAAO,QAEfC,EACa,OAAfxB,EAAMqB,KACA,CACIC,OAAQ,MACRC,MAAO,MACPE,UAAW,QACXC,WAAY,QAEhB,CACIJ,OAAQ,OACRC,MAAO,OACPE,UAAW,QACXC,WAAY,QAE1B,OACI,sBACIzB,UAAWC,IAAOC,KAClBM,MAAK,2BAAOW,GAAqBpB,EAAMS,OAF3C,UAII,qBACIkB,IAAK3B,EAAM4B,SACXC,IAAI,cACJ5B,UAAWC,IAAO4B,IAClBrB,MAAOW,IAEVpB,EAAM+B,YACH,qBACI9B,UAAWC,IAAO8B,MAClBvB,MAAK,aACDwB,gBACyB,WAArBjC,EAAM+B,WACA,UACA,WACPP,Q,qBChDZ,SAASU,EAAOlC,GAC3B,OAAO,wBAAQC,UAAWC,IAAOC,KAA1B,SAAiCH,EAAMmC,WCNnCC,MCSA,SAAoBpC,GAAe,IAAD,EAC7C,OACI,eAACkC,EAAD,YACK,UAAAlC,EAAMe,YAAN,eAAYa,WACT,cAACT,EAAD,CACIS,SAAU5B,EAAMe,KAAKa,SACrBP,KAAM,KACNU,WAAY/B,EAAMqC,YAI1B,oBACI5B,MAAO,CACHiB,WAAY,OACZY,SAAU,SAHlB,0B,YCpBGC,MCoBA,SAA4BvC,GACvC,MAAgCwC,YAAe,GAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAc3C,EAAM4C,SACpB,0BACA,4BACAC,EAAiB7C,EAAM6C,eAAiB7C,EAAM6C,eAAiB,GAE/DC,EAAqC,GAgB3C,OAfI9C,EAAM+C,cAIND,EAHiB9C,EAAM4C,SACjB,uBACA,uBACoB,OAE1B5C,EAAMgD,cAINF,EAHiB9C,EAAM4C,SACjB,0BACA,0BACoB,OAG9BK,QAAQC,IAAIlD,EAAMmD,QAAQC,WAGtB,sBACInD,UAAW4C,EACXQ,IAAKrD,EAAMsD,iBACX7C,MAAK,aACD8C,QAAS,OACTC,cAAe,UACXxD,EAAMyB,UACJ,CAAEA,UAAWzB,EAAMyB,gBACnBgC,GARd,UAWKzD,EAAM0D,WAAa1D,EAAM4C,UACtB,mBACInC,MAAK,aACDkD,aAAc,MACdlC,UAAW,MACXmC,UAAW5D,EAAM4C,SAAW,QAAU,OACtCN,SAAU,QACLtC,EAAM4C,SAAoC,KAAzB,CAAElB,WAAY,SAN5C,SASK1B,EAAMmD,QAAQU,aAIvB,sBACIpD,MAAO,CACH8C,QAAS,OACTO,UACmB,UAAf9D,EAAM+D,KACA,WACe,SAAf/D,EAAM+D,KACN,kBACAN,GARlB,WAWMzD,EAAM4C,UAAY5C,EAAMgE,aACtB,qBACIvD,MAAO,CACHwD,YAAa,MACb3C,OAAQ,OACRC,MAAO,QAJf,SAOI,cAACJ,EAAD,eAAYnB,EAAMgE,iBAGxBhE,EAAM4C,WACH5C,EAAMgE,aACPhE,EAAMkE,kBACF,qBACIzD,MAAO,CACHwD,YAAa,MACb3C,OAAQ,OACRC,MAAO,UAIvB,mBACIhB,GAAG,0BACHN,UAAW0C,EACXlC,MAAK,2BAAOqC,GAAP,IAAsBqB,WAAY,aACvC/D,QAAS,kBAAMsC,GAAY,SAAC0B,GAAD,OAAWA,MAJ1C,SAMKpE,EAAMmD,QAAQkB,aAGtB5B,GACG,mBACIhC,MAAK,yBACDgB,UAAW,MACXmC,UAAW5D,EAAM+D,MACZ/D,EAAM4C,SAEL,CAAEqB,YAAa,QADf,CAAEvC,WAAY,SAJnB,IAMDY,SAAU,OACVqB,aAAc,QARtB,SAWK,IAAIW,KAAKtE,EAAMmD,QAAQC,WAAWmB,uBC9HjDC,EAAgB,IAGhBC,EAAiBD,KAIhB,SAASE,EAAT,GAQK,IAPRC,EAOO,EAPPA,KACAC,EAMO,EANPA,MACAC,EAKO,EALPA,KACAC,EAIO,EAJPA,KACAC,EAGO,EAHPA,OAIIC,EAAa,EAgBjB,OAfIL,IACAK,GAba,GAaCL,EAAsBF,GAEpCG,IACAI,GAAcJ,EAAQH,GAEtBI,IACAG,GApBcR,IAoBAK,GAEdC,IACAE,GAAcF,EAAON,GAErBO,IACAC,GAAcD,GAEXC,EAGJ,SAASC,EAAT,GAEwC,IAD3CF,EAC0C,EAD1CA,OAEIC,EAAa,EAIjB,OAHID,IACAC,GAAcD,EAASP,GAEpBQ,ECxCIE,MC4BA,SAAqBlF,GAChC,IAAMsD,EAAmBd,SAAoC,MAsM7D,OApMAA,aAAgB,WACRc,EAAiB6B,SACjB7B,EAAiB6B,QAAQC,eAAe,CAAEC,SAAU,aAEzD,CAACrF,EAAMsF,SAASzE,SAgMZ,qBAAKN,GAAG,mBAAR,SA/HP,WACI,IAAMgF,EApDCvF,EAAMsF,SAASE,QAClB,SAACC,EAAiBC,EAAgB1E,EAAO2E,GACrC,IAAMC,EAAwBX,EAAc,CACxCF,OAAQW,EAAetC,YA0C3B,OAvCIpC,EAAQ,IACJ2E,EAAI3E,EAAQ,GAAG6E,SAAWH,EAAeG,OAGrCD,EACAX,EAAc,CACVF,OAJoBY,EAAI3E,EAAQ,GAAGoC,YAMX,IAC5BqC,EAAgB1C,YACZ2C,EAAenF,KACf,EACJkF,EAAgBhE,UAAUiE,EAAenF,IAAM,OAE/CkF,EAAgBhE,UAAUiE,EAAenF,IACrC,OAGRkF,EAAgBhE,UAAUiE,EAAenF,IAAM,QAKnDoF,EAAI9E,OAAS,GACbG,EAAQ2E,EAAI9E,OAAS,GACrB8E,EAAI3E,EAAQ,GAAG6E,SAAWH,EAAeG,QAIrCZ,EAAc,CACVF,OAHgBY,EAAI3E,EAAQ,GAAGoC,YAI9BwC,EACuB,KAC5BH,EAAgBzC,YAAY0C,EAAenF,KAAM,EACjDkF,EAAgBK,sBACZJ,EAAenF,KACf,GAGLkF,IApDiB,CAC5B1C,YAAa,GACbC,YAAa,GACb8C,sBAAuB,GACvBrE,UAAW,KAwDTsE,EAAM,IAAIzB,KACV0B,EAAe,IAAIC,KAAKC,eAAe,QAAS,CAClDC,QAAS,SAEPC,EAAiB,IAAIH,KAAKC,eAAe,QAAS,CACpDG,MAAO,UAEX,OAAOrG,EAAMsF,SAASxE,KAAI,SAACqC,EAASnC,EAAO2E,GACvC,IAAM/C,KAAc5C,EAAMsG,QAAUtG,EAAMsG,SAAWnD,EAAQ0C,QACvDU,EAAavG,EAAMwG,SAASrD,EAAQ0C,QACpCY,EAAc,IAAInC,KAAKnB,EAAQC,WACjCsD,GAAoC,EAMxC,GAAc,IAAV1F,EACA0F,GAA2B,MACxB,CACH,IAAMC,EAAW,IAAIrC,KAAKqB,EAAI3E,EAAQ,GAAGoC,WACzCsD,EACc,IAAV1F,GACA2F,EAASC,iBAAmBH,EAAYG,gBACxCD,EAASE,WACLJ,EAAYI,UAAYnC,EAAgB,CAAEE,MAAO,IAG7D,IAAIA,EAAyB6B,EAAYK,WACrCC,EAA2BN,EAAYO,aAC3CpC,EAAQA,EAAQ,GAAR,UAAgB,EAAIA,GAAUA,EACtCmC,EAAUA,EAAU,GAAV,UAAkB,EAAIA,GAAYA,EAE5C,IACIE,EADAC,EAAY,UAAMtC,EAAN,YAAemC,GAE/B,GAAIL,EACA,GAAID,EAAYG,iBAAmBb,EAAIa,eACnCK,EAAc,aACX,GACHR,EAAYG,iBACZ,IAAItC,KACAyB,EAAIc,UAAYnC,EAAgB,CAAEC,KAAM,KAC1CiC,eAEFK,EAAc,gBACX,CAGH,IAAME,EAAYzC,EAAgB,CAC9BE,MAAOmB,EAAIe,WACXjC,KAAMkB,EAAIiB,aACVlC,KAAMiB,EAAIqB,aACVrC,OAAQgB,EAAIsB,oBAIhB,GACIZ,EAAYI,UACZ,IAAIvC,KACAyB,EAAIc,WACCnC,EAAgB,CAAEC,KAAM,IAAOwC,IACtCN,UAEFI,EAAcjB,EAAasB,OAAOb,OAC/B,CACH,IAAMJ,EAAQD,EAAekB,OAAOb,GACpCQ,EAAW,UAAMjB,EAAasB,OAC1Bb,GADO,aAELJ,EAFK,YAEII,EAAYc,YAKvC,IAAMC,IACArE,EAAQvB,WAAa2D,EAAQO,sBAAsB3C,EAAQ5C,IAEjE,OACI,eAAC,WAAD,WACKmG,GAA4BO,GACzB,mBAEIxG,MAAO,CACHmD,UAAW,SACXnC,UAAW,OACXkC,aAAc,OALtB,mBAQQsD,EARR,cAQyBC,IARzB,eACiB/D,EAAQ5C,KAU7B,cAAC,EAAD,CAEI4C,QAASA,EACTG,iBACItC,IAAUhB,EAAMsF,SAASzE,OAAS,EAC5ByC,OACAG,EAEVb,SAAUA,EACVmB,KAAMnB,EAAW,QAAU,OAC3B2D,WAAYA,EACZrC,kBAAmBtB,IAAa4E,EAChCxD,aACKpB,GAAY4E,EACN,CACG5F,SAAUuB,EAAQvB,SAClBG,WAAYwE,EAAWkB,YAE3BhE,EAEVV,YAAawC,EAAQxC,YAAYI,EAAQ5C,IACzCyC,YAAauC,EAAQvC,YAAYG,EAAQ5C,IACzCmD,UAAW6B,EAAQxC,YAAYI,EAAQ5C,IACvCsC,eACI7C,EAAMsG,QAAUtG,EAAMsG,SAAWnD,EAAQ0C,OACnC,oCACA,sCAEVpE,UAAW8D,EAAQ9D,UAAU0B,EAAQ5C,KA3BhC4C,EAAQ5C,MAdrB,aAA2B4C,EAAQ5C,QAgDZmH,M,MCnOxBC,MCOA,SAAkC3H,GAC7C,OACI,sBAAKO,GAAG,gCAAR,UACI,0BACIqH,SAAU5H,EAAM6H,oBAChBC,MAAO9H,EAAM+H,eAEjB,uBAAOC,KAAK,SAASF,MAAM,OAAO1H,QAASJ,EAAMiI,iBCdtD,SAASC,EAAYlI,GACxB,OACI,qBACIS,MAAO,CACH8C,QAAS,OACTC,cAAe,SACf2E,SAAU,EACVC,UAAW,EACXC,SAAU,SANlB,SASKrI,EAAMmC,WAKZ,SAASmG,EAAkBtI,GAC9B,OACI,qBACIS,MAAO,CACH8C,QAAS,OACTC,cAAe,SACfvB,gBAAiB,OACjBkG,SAAU,EACVC,UAAW,GANnB,SASKpI,EAAMmC,WCtBZ,SAASoG,EAAOvI,GACnB,OACI,sBAAKS,MAAO,CAAEa,OAAQ,QAAtB,UACI,cAACY,EAAD,UACI,oBACIzB,MAAO,CACHiB,WAAY,OACZY,SAAU,SAHlB,wBASJ,sBACI7B,MAAO,CACHa,OAAQ,OACRiC,QAAS,OACTiF,WAAY,SACZC,eAAgB,SAChBjF,cAAe,UANvB,UASI,wBACI/C,MAAO,CACHC,OAAQ,MACR4B,SAAU,OACVqB,aAAc,QAElBvD,QAAS,kBAAMJ,EAAM0I,gBAAgB,WANzC,iCAUA,wBACIjI,MAAO,CAAEC,OAAQ,MAAO4B,SAAU,QAClClC,QAAS,kBAAMJ,EAAM0I,gBAAgB,WAFzC,uC,WCjChB,IAAMC,EAAS,CACXC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,aACnBC,MAAO,0CACPC,cAAe,gBAGJ,SAASC,IAIpB,MCjBW,SACXC,GAEA,MAA0BC,oBAAmB,WACzC,IAAMC,EAAcC,aAAaC,QAAQJ,GAEzC,QADiBE,GAAeG,KAAKC,MAAMJ,IAEhC,QAJf,mBAAOxB,EAAP,KAAc6B,EAAd,KAcA,OAJAC,qBAAU,WACNL,aAAaM,QAAQT,EAAKK,KAAKK,UAAUhC,MAC1C,CAACsB,EAAKtB,IAEF,CAACA,EAAO6B,GDASI,CAAoC,gBAA5D,mBAAOhJ,EAAP,KAAaiJ,EAAb,KACA,EAGIX,mBAAkD,MAHtD,mBACIY,EADJ,KAEIC,EAFJ,KAIA,EAGIb,mBAAkD,MAHtD,mBACIc,EADJ,KAEIC,EAFJ,KANF,4CA6BE,WAAiDrJ,GAAjD,SAAAsJ,EAAA,sEAC2BC,IAClBC,WACAlH,IAFkB,gBAELtC,EAAKyJ,MAClBC,KAAK,SAJd,kBAKiBC,MALjB,gCAMcJ,IAASC,WAAWlH,IAApB,gBAAiCtC,EAAKyJ,MAAOG,OAAO,CACtDzJ,SAAUH,EAAK6J,YACfhJ,SAAUb,EAAKa,WAR3B,qCAWQqB,QAAQC,IAAR,eAAoBnC,EAAKyJ,IAAzB,mCAXR,UAYcF,IAASC,WAAWlH,IAApB,gBAAiCtC,EAAKyJ,MAAOK,IAAI,CACnD3J,SAAUH,EAAK6J,YACfhJ,SAAUb,EAAKa,WAd3B,6CA7BF,sBAsEE,OAtBAgI,qBAAU,WACuB,IAAzBU,IAASQ,KAAKjK,QACdyJ,IAASS,cAAcpC,GAE3B,IAAMsB,EAAiB,IAAIK,IAASU,KAAKC,mBACnCd,EAAiB,IAAIG,IAASU,KAAKE,mBACzChB,EAAkBD,GAClBG,EAAkBD,GAClBG,IAASU,OAAOG,oBAAmB,SAACpK,GAC5BA,GAEAiJ,EAAQjJ,GA3DtB,oCA4DcqK,CAAkCrK,IAGlCiJ,EAAQ,WAKjB,IAEI,CAACjJ,EA3DR,SAAyBsK,GACrB,IAAIC,EACJ,GAAe,WAAXD,GAAuBpB,EACvBqB,EAAmBrB,MAChB,IAAe,WAAXoB,IAAuBlB,EAG9B,OAFAmB,EAAmBnB,EAKvBG,IACKU,OACAO,gBAAgBD,GAChBE,OAAM,SAACC,GACJxI,QAAQwI,MAAR,sCAA6CA,S,ME1C9CC,MCgBA,SAA4B1L,GACvC,SAAS2L,EAAmBC,GACxBA,EAAEC,iBACF7L,EAAM8L,aAAa,CACf9D,KAAM,gBACN+D,QAASH,EAAEI,OAAOC,QAAQC,WAIlC,OACI,sBAAK3L,GAAG,0BAAR,UACI,oBAAIE,MAAO,CAAEgB,UAAW,KAAxB,mDAGA,uBACIlB,GAAG,0BACHyH,KAAK,OACLF,MAAO9H,EAAMmM,UAAUC,oBACvBxE,SAAU,SAACgE,GAAD,OACN5L,EAAM8L,aAAa,CACf9D,KAAM,wBACN+D,QAASH,EAAES,cAAcvE,WAKrC,wDACA,8BACK9H,EAAMsM,MACFC,QAAO,SAACxL,GAAD,OAAUA,EAAKR,KAAOP,EAAMsG,UACnCxF,KAAI,SAACC,GACF,OACI,sBAEId,UAAW,QACXQ,MAAO,CACH8C,QAAS,OACTkF,eAAgB,OAChBD,WAAY,SACZgE,SAAU,OACVC,WAAY,OACZC,QAAS,WACTC,OAAQ,oBACRC,aAAc,MACdnL,UAAW,MACXQ,gBAAiBjC,EAAMmM,UAAUU,yBAAyBC,SACtD/L,EAAKR,IAEH,eACAkD,GAEVsJ,gBAAehM,EAAKR,GAEpBH,QAASuL,EArBb,UAuBK5K,EAAKa,UACF,cAACT,EAAD,CACIS,SAAUb,EAAKa,SACfG,WACI/B,EAAMgN,aAAajM,EAAKR,IAAIkH,MAEhChH,MAAO,CACHwD,YAAa,SAIxBlD,EAAKG,WAlCV,kBACoBH,EAAKR,c,4BCjDtC0M,MCUA,SAAwBjN,GACnC,OACI,eAACkC,EAAD,WACI,qBACI9B,QAASJ,EAAMkN,KACfzM,MAAO,CACH8C,QAAS,OACTtB,gBAAiB,QACjBkL,MAAO,QACPP,aAAc,MACdQ,OAAQ,UACRV,QAAS,iBARjB,SAWI,cAAC,IAAD,CAAiBW,KAAMC,IAAajM,KAAM,SAE9C,oBAAIZ,MAAO,CAAEiB,WAAY,OAAzB,SAAmC1B,EAAMM,aAAaK,WClB3D,SAAS4M,EAAavN,GACzB,MAAsCwC,WAAexC,EAAM4K,aAA3D,mBAAO4C,EAAP,KAAoBC,EAApB,KAaA,OACI,qBACIhN,MAAO,CACH8C,QAAS,OACTiF,WAAY,SACZC,eAAgB,UAJxB,SAOI,uBACIhI,MAAO,CACH8C,QAAS,OACTC,cAAe,SACfkJ,QAAS,OAEbgB,SAzBZ,SAAsB9B,GAClBA,EAAEC,iBACE2B,EACAxN,EAAM2N,cAAc,CAChB/C,YAAa4C,IAGjBvK,QAAQwI,MAAM,4BAYd,UAQI,sBACIhL,MAAO,CACH8C,QAAS,OACTmJ,QAAS,MACT/I,aAAc,OACdH,cAAe,UALvB,UAQI,uBACIoK,QAAQ,iBACRnN,MAAO,CAAEoN,cAAe,OAF5B,sBAMA,uBACItN,GAAG,iBACHyH,KAAK,OACL8F,YAAY,wBACZhG,MAAO0F,EACP5F,SAAU,SAACgE,GAAD,OAAO6B,EAAe7B,EAAEI,OAAOlE,aAGjD,uBAAOE,KAAK,SAASF,MAAM,cC7C3C,SAASiG,EAAmBtG,EAAcuG,GACtC,OAAQA,EAAOhG,MACX,IAAK,iBAML,IAAK,sBACD,OAAO,2BACAP,GADP,IAEIwG,sBAAsB,EACtBC,kBAAkB,IAE1B,IAAK,yBACD,OAAO,2BACAzG,GADP,IAEIwG,sBAAsB,EACtBC,kBAAkB,IAE1B,IAAK,qBACD,OAAO,2BACAzG,GADP,IAEIwG,sBAAsB,EACtBC,kBAAkB,IAE1B,QACI,OAAOzG,G,iCCpBJ0G,MAdf,SAAwBnO,GACpB,OACI,qBAAKC,UAAWC,IAAOC,KAAvB,SAOI,wBAAQC,QAASJ,EAAMoO,OAAvB,wBCJZ,SAASC,EAAwB5G,EAAcuG,GAC3C,OAAQA,EAAOhG,MACX,IAAK,wBACD,OAAO,2BACAP,GADP,IAEI2E,oBAAqB4B,EAAOjC,UAEpC,IAAK,gBACD,OAAItE,EAAMoF,yBAAyBC,SAASkB,EAAOjC,SACxC,2BACAtE,GADP,IAEIoF,yBAA0BpF,EAAMoF,yBAAyBN,QACrD,SAAC+B,GAAD,OAAYA,IAAWN,EAAOjC,aAI/B,2BACAtE,GADP,IAEIoF,yBAAyB,GAAD,mBACjBpF,EAAMoF,0BADW,CAEpBmB,EAAOjC,YAIvB,QACI,OAAOtE,G,YChCZ,SAAe8G,EAAtB,oC,4CAAO,WACHC,EACAzN,GAFG,iCAAAsJ,EAAA,yDAIK1J,EAAsB6N,EAAtB7N,KACmB,KADb8N,EAAgBD,EAAhBC,aACE5N,OALb,uBAMCoC,QAAQwI,MAAM,qBANf,kBAOQ,MAPR,uBAWOiD,EAAKpE,IAASC,WAXrB,SAc+BoE,QAAQC,IAClCH,EAAY3N,KAAI,SAAC+N,GACb,OAAOH,EAAGrL,IAAH,gBAAgBwL,IAAYpE,KAAK,aAhBjD,OAcOqE,EAdP,qBAoBsBA,GApBtB,+DAoBUC,EApBV,SAqBmBrE,MArBnB,wBAsBSsE,MAAM,aAAD,OAAcD,EAAS3F,IAAvB,qBAtBd,kBAuBgB,MAvBhB,kKA4B+BsF,EAAGrL,IAAH,iBAAwB4L,OA5BvD,eA4BOC,EA5BP,OA6BOC,EAAiBD,EAAgB9F,IA7BxC,UA+BO8F,EAAgBrE,IAAI,CACtBzH,UAAWkH,IAASC,SAAS6E,YAAYC,UACzCC,UAAWvO,EACXJ,KAAMA,IAlCX,eAqCO4O,EAAsC,IAG7B,qBAAD,OAAsBxO,EAAKyJ,IAA3B,YAAkC2E,IAAoB,CAChEK,UAAWzO,EAAKyJ,KAEpB+E,EAAe,qBAAD,OAAsBJ,EAAtB,YAAwCpO,EAAKyJ,MAAS,CAChEgF,UAAWzO,EAAKyJ,IAChBtJ,SAAUH,EAAK6J,aAInBkE,EAAgBW,SAAQ,SAACV,GACrBQ,EAAe,qBAAD,OACWR,EAAS3F,IADpB,YAC2B+F,IACrC,CACAK,UAAWzO,EAAKyJ,KAEpB+E,EAAe,qBAAD,OACWJ,EADX,YAC6BJ,EAAS3F,MAChD,CACAoG,UAAWzO,EAAKyJ,IAChBtJ,SAAU6N,EAASW,MAAM,YAAYhF,OAAS,OA3DvD,UA+DOgE,EAAGrL,MAAMsH,OAAO4E,GA/DvB,iCAiEQJ,GAjER,yCAmECH,MAAM,yBAAD,cAnEN,kBAoEQ,MApER,yE,sBCNA,SAAeW,EAAtB,sC,4CAAO,WACH5O,EACA6O,EACAT,GAHG,iBAAA9E,EAAA,6DAKGlH,EAAU,CACZ0C,OAAQ9E,EAAKyJ,IACb3G,WAAY9C,EAAK6J,aAAe,GAChCxH,UAAWkH,IAASC,SAAS6E,YAAYC,UACzChL,QAASuL,EACThO,SAAUb,EAAKa,UAVhB,SAYyB0I,IACvBC,WACAlH,IAFuB,mBAEP8L,IAChBF,OAfF,cAYGY,EAZH,yBAgBIA,EAAchF,IAAI1H,IAhBtB,4C,sBCAA,SAAeiL,IAAtB,gC,8CAAO,sBAAA/D,EAAA,+EACIC,IAASU,OAAO8E,WADpB,4C,sBC6UQC,IC3UkBC,GCFlBC,IDEkBD,GDmDjC,SAAahQ,GAAkB,IAAD,UACpBkQ,EAAe5F,IAASQ,KAAKjK,OAAS,EAE5C,EGnDG,SACHsP,EACA7J,GAOA,MAA0C+C,mBAA+B,IAAzE,mBAAO+G,EAAP,KAAsBC,EAAtB,KACA,EAA4ChH,mBAAwB,MAApE,mBAAO8F,EAAP,KAAuBmB,EAAvB,KACA,EAAgCjH,mBAA0B,IAA1D,mBAAO/D,EAAP,KAAiBiL,EAAjB,KAwOA,OAlOA3G,qBAAU,WACN,IACI,IAAKuG,IAAgB7J,EACjB,OAGJ,IAAMoI,EAAKpE,IAASC,WAEdiG,EAA0B,4BAAwBlK,GAClDmK,EAAuB/B,EAAGrL,IAAImN,GAmJpC,OA3IC,sBAAC,wCAAAnG,EAAA,sEACsCoG,EAC/BC,aACAjG,KAAK,SAHZ,UACQkG,EADR,OAIQC,EAA6C,GAC/CC,EAAgC,IAChCF,EAAsBG,SAN5B,wBAOYC,EAA2D,GAC3DC,EAAwD,GAE9DL,EAAsBlB,SAAQ,SAACwB,GAC3BF,EAAc9B,KACVP,EACKrL,IADL,wBAC0B4N,EAAG7H,MACxBsH,aACAjG,KAAK,UAEduG,EAAW/B,KACPP,EACKrL,IADL,4BAC8B4N,EAAG7H,MAC5BsH,aACAjG,KAAK,aArBxB,UAyBkCkE,QAAQC,IAAImC,GAzB9C,eAyBYG,EAzBZ,iBA0B+BvC,QAAQC,IAAIoC,GA1B3C,QA0BYG,EA1BZ,OA8BMR,EAAsBlB,SAAQ,SAACwB,GAC3B,GAAKA,EAAG7H,IAAR,CAGA,IAAMgI,EAA4B,CAC9B7Q,GAAI0Q,EAAG7H,IACPxI,WAAY,GACZD,KAAM,IAGJ0Q,EAAsBH,EAAcI,MACtC,SAACC,GAAD,OAASA,EAAIlO,IAAI+F,MAAQ6H,EAAG7H,OAE1BoI,EAA2BL,EAAWG,MACxC,SAACG,GAAD,OAASA,EAAIpO,IAAI+F,MAAQ6H,EAAG7H,OAI5BiI,IACAD,EAAMzQ,KAAO0Q,EAAoB3G,MAAM/J,MAIvC6Q,GACAA,EAAyB/B,SACrB,SAACiC,GAEOA,EAAiBtI,KACjBsI,EAAiBtI,MAAQ9C,GAEzB8K,EAAMxQ,WAAWqO,KAAK,CAClB1O,GAAImR,EAAiBtI,IACrBlI,SAAUwQ,EACLhC,MAAM,YACNhF,WAOzBkG,EAAqB3B,KAAKmC,OAG9Bf,EAAiBO,GAEjBC,EACID,EAAqB/P,OAAS,EACxB+P,EACIA,EAAqB/P,OAAS,GAChCN,GACF,GAjFhB,wBAmFM8P,EAAiB,IACjBC,EAAkB,MApFxB,QAuFEG,EACKC,aACAiB,WAAWd,GACXe,GACG,eACA,SAACC,EAA0BC,GAEvB,IAAMC,EAAQF,EAAyBzI,IACvC,GAAK2I,EAAL,CAGA,IAAMX,EAA4B,CAC9B7Q,GAAIwR,EACJnR,WAAY,GACZD,KAAM,IAEV+N,EAAGrL,IAAH,wBAAwB0O,IACnBrB,aACAjG,KAAK,SACLuH,MAAK,SAAC1R,GACH8Q,EAAMzQ,KAAOL,EAAaoK,MAAM/J,KAChC+N,EAAGrL,IAAH,4BAA4B0O,IACvBrB,aACAjG,KAAK,SACLuH,MAAK,SAACC,GACHA,EAAqBxC,SACjB,SAACyC,GAEOA,EAAI9I,KACJ8I,EAAI9I,MAAQ9C,GAEZ8K,EAAMxQ,WAAWqO,KAAK,CAClB1O,GAAI2R,EAAI9I,IACRlI,SAAUgR,EACLxC,MACG,YAEHhF,WAKrB2F,GAAiB,SAACjM,GAAD,4BACVA,GADU,CAEbgN,iBAnIlC,2CAAD,GA2IM,WACHX,EAAqB0B,IAAI,gBAE/B,MAAOvG,GAEL,YADA3I,QAAQwI,MAAMG,MAGnB,CAACuE,EAAa7J,IAKjBsD,qBAAU,WACN,IACI,IAAKuG,IAAgB7J,IAAW6I,EAC5B,OAGJ,IAAMT,EAAKpE,IAASC,WACd6H,EAAiB,mBAAejD,GAChCkD,EAAc3D,EAAGrL,IAAI+O,GA0C3B,OAxCC,sBAAC,gCAAA/H,EAAA,sEAC6BgI,EACtB3B,aACAjG,KAAK,SAHZ,OACQ6H,EADR,OAIQC,EAAmC,GAErCD,EAAaxB,UACbwB,EAAa7C,SAAQ,SAAC+C,GAClB,GAAIA,EAAEpJ,IAAK,CACP,IAAMqJ,EAAgBD,EAAEE,SACxBH,EAAgBtD,KAAhB,2BACOwD,GADP,IAEIlS,GAAIiS,EAAEpJ,WAIlBmH,EAAYgC,IAEZhC,EAAY,IAGVoC,EACFJ,EAAgB1R,OAAS,EACnB0R,EAAgBA,EAAgB1R,OAAS,GAAGN,GAC5C,GACV8R,EACK3B,aACAiB,WAAWgB,GACXf,GAAG,eAAe,SAACgB,EAAiBd,GACjC,GAAIc,EAAgBxJ,IAAK,CACrB,IAAMqJ,EAAgBG,EAAgBF,SAChCG,EAA4B,2BAC3BJ,GAD2B,IAE9BlS,GAAIqS,EAAgBxJ,MAExBmH,GAAY,SAACnM,GAAD,4BAAcA,GAAd,CAAoByO,WAnC9C,0CAAD,GAwCM,WACHR,EAAYF,IAAI,gBAEtB,MAAOvG,GACL3I,QAAQwI,MAAMG,MAEnB,CAACuE,EAAa7J,EAAQ6I,IAElB,CACH7J,WACA8K,gBACAjB,iBACAmB,qBH/LAwC,CAAgB5C,EAAD,UAAelQ,EAAMe,YAArB,aAAe,EAAYyJ,KAJ1ClF,EADJ,EACIA,SACA8K,EAFJ,EAEIA,cACAjB,EAHJ,EAGIA,eACAmB,EAJJ,EAIIA,kBAEEyC,EAAsB5D,EACrBiB,EAAckB,MACX,SAAC0B,GAAD,OAAOA,EAAEzS,KAAO4O,KAEpB,KAEN,EI9DG,SACHgB,EACA7J,GAEA,MAAgC9D,WAAmC,IAAnE,mBAAOgE,EAAP,KAAiByM,EAAjB,KACA,EAA0BzQ,WAA6B,IAAvD,mBAAO8J,EAAP,KAAc4G,EAAd,KA+LA,OA1LA1Q,aAAgB,WACZ,GAAK2N,GAAgB7J,EAArB,CAIA,IAAMoI,EAAKpE,IAASC,WACd4I,EAAwBzE,EAAGrL,IAAI,WAAaiD,GAC5C8M,EAAmB1E,EAAGrL,IAAI,mBAI1BgQ,EAAyC,CAC3C5L,MAAO,UACP6L,YAAahJ,IAASC,SAAS6E,YAAYC,WAGzCkE,EAAwC,CAC1C9L,MAAO,SACP6L,YAAahJ,IAASC,SAAS6E,YAAYC,WA+B/C,OAzBA+D,EAAiBxB,GAAG,SAAS,SAAU7C,GAE9BA,EAASrE,OAQdyI,EACKK,eACA3I,IAAIwI,GACJrB,MAAK,WAQFmB,EAAsBtI,IAAI0I,SAI/B,WACHH,EAAiBjB,IAAI,aAE1B,CAAChC,EAAa7J,IAKjB9D,aAAgB,WACZ,GAAK2N,EAAL,CAIA,IAAMzB,EAAKpE,IAASC,WACdkJ,EAAY/E,EAAGrL,IAAI,WAgDzB,OA9CC,sBAAC,8BAAAgH,EAAA,6DACMqJ,EAAgB,GACdC,EAAkC,GAF1C,SAI+BjF,EACxBrL,IAAI,WACJqN,aACAjG,KAAK,SAPZ,cAQiBgF,SAAQ,SAACmE,GAChBA,EAAKxK,MACLsK,EAAgBE,EAAKxK,IACrBuK,EAAYC,EAAKxK,KAAO,CACpB3B,MAAOmM,EAAKlE,MAAM,SAAShF,MAC3B4I,YAAaM,EAAKlE,MAAM,eAAehF,WAInDuI,EAAYU,GAEZF,EAAU9B,WAAW+B,GAAe9B,GAAG,eAAe,SAACgC,GACnD,IAAMxK,EAAMwK,EAAKxK,IACbA,GACA6J,GAAY,SAAC7O,GAAD,mBAAC,eACNA,GADK,kBAEPgF,EAAM,CACH3B,MAAOmM,EAAKlE,MAAM,SAAShF,MAC3B4I,YAAaM,EAAKlE,MAAM,eAAehF,eAMvD+I,EAAU7B,GAAG,iBAAiB,SAACgC,GAC3B,IAAMxK,EAAMwK,EAAKxK,IACbA,GACA6J,GAAY,SAAC7O,GAAD,mBAAC,eACNA,GADK,kBAEPgF,EAAM,CACH3B,MAAOmM,EAAKlE,MAAM,SAAShF,MAC3B4I,YAAaM,EAAKlE,MAAM,eAAehF,eAvCzD,0CAAD,GA8CM,WACH+I,EAAUtB,IAAI,eACdsB,EAAUtB,IAAI,qBAEnB,CAAChC,IAKJ3N,aAAgB,WACZ,GAAK2N,EAAL,CAIA,IAAMzB,EAAKpE,IAASC,WACdsJ,EAAWnF,EAAGrL,IAAI,UAsDxB,OApDC,sBAAC,8BAAAgH,EAAA,6DACMyJ,EAAc,GACZC,EAAyB,GAFjC,SAI8BrF,EACvBrL,IAAI,UACJqN,aACAjG,KAAK,SAPZ,cAQgBgF,SAAQ,SAACmE,GACfA,EAAKxK,MACL0K,EAAcF,EAAKxK,IACnB2K,EAAS9E,KAAK,CACV1O,GAAIqT,EAAKxK,IACTlI,SAAU0S,EAAKlE,MAAM,YAAYhF,MACjC9I,SAAUgS,EAAKlE,MAAM,YAAYhF,YAI7CwI,EAASa,GAETF,EAASlC,WAAWmC,GAAalC,GAAG,eAAe,SAACgC,GAChD,IAAMxK,EAAMwK,EAAKxK,IACbA,GACA8J,GAAS,SAAC9O,GAAD,4BACFA,GADE,CAEL,CACI7D,GAAI6I,EACJlI,SAAU0S,EAAKlE,MAAM,YAAYhF,MACjC9I,SAAUgS,EAAKlE,MAAM,YAAYhF,eAMjDmJ,EAASjC,GAAG,iBAAiB,SAACgC,GAC1B,IAAMxK,EAAMwK,EAAKxK,IACbA,GACA8J,GAAS,SAAC9O,GACN,IAAM2P,EAAQ,YAAO3P,GACf4P,EAAcD,EAASzC,MACzB,SAACvQ,GAAD,OAAUA,EAAKR,KAAO6I,KAM1B,OAJI4K,IACAA,EAAY9S,SAAW0S,EAAKlE,MAAM,YAAYhF,MAC9CsJ,EAAYpS,SAAWgS,EAAKlE,MAAM,YAAYhF,OAE3CqJ,QA9CrB,0CAAD,GAoDM,WACHF,EAAS1B,IAAI,eACb0B,EAAS1B,IAAI,qBAElB,CAAChC,IAEG,CAAC7D,EAAO9F,GJtIeyN,CAAS/D,EAAD,UAAelQ,EAAMe,YAArB,aAAe,EAAYyJ,KAAjE,mBAAO8B,EAAP,KAAcU,EAAd,KAEMkH,EKnEH,WACH,MAAoC7K,oBAAiC,WACjE,OAAO8K,EAAoBC,OAAOC,eADtC,mBAAOH,EAAP,KAAmBI,EAAnB,KAIA,SAASH,EAAoBI,GACzB,OAAIA,GAAe,KACR,KACAA,GAAe,KACf,KACAA,GAAe,IACf,KACAA,GAAe,IACf,KAEA,KAiBf,OAbA3K,qBAAU,WACN,SAAS4K,IACL,IAAMjT,EAAQ6S,OAAOC,WACrBC,EAAcH,EAAoB5S,IAOtC,OAJA6S,OAAOK,iBAAiB,SAAUD,GAElCA,IAEO,kBAAMJ,OAAOM,oBAAoB,SAAUF,MACnD,IAEIN,ELmCYS,GAEnB,EAAwCnS,IAAM6G,SAAS,IAAvD,mBAAOtB,EAAP,KAAqB6M,EAArB,KAEA,EN5BG,WACH,MAA0BC,qBACtB9G,EACA,CACIE,sBAAsB,EACtBC,kBAAkB,IAJ1B,mBAQA,MAAO,CARP,WM2B2C4G,GAA3C,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,GJlCG,WACH,MAA0BH,qBACtBxG,EACA,CACIjC,oBAAqB,GACrBS,yBAA0B,KAJlC,mBAQA,MAAO,CARP,WIoCIoI,GAHJ,qBACIC,GADJ,MAEIC,GAFJ,MAKA,SAASC,GAAoB7U,GACzB8U,GAA2B,CACvBrN,KAAM,sBACNmH,eAAgB5O,IAIxB,SAAS8U,GACLrH,GAEAgH,EAAoB,CAAEhN,KAAMgG,EAAOhG,OACnCsI,EAAkBtC,EAAOmB,gBAAkB,MAvCrB,8CA+C1B,4BAAA9E,EAAA,yDACSrK,EAAMe,MAASmP,EADxB,uBAEQjN,QAAQwI,MAAM,iBAFtB,0CAMiC8C,EAEzB,CACI5N,KAAMuU,GAAsB9I,oBAC5BqC,YAAayG,GAAsBrI,0BAEvC7M,EAAMe,MAZd,QAMUoO,EANV,SAeQkG,GAA2B,CACvBrN,KAAM,sBACNmH,mBAjBZ,4CA/C0B,oEAqE1B,WACIvD,GADJ,SAAAvB,EAAA,yDAGIuB,EAAEC,iBAEG7L,EAAMe,MAASmP,EALxB,uBAMQjN,QAAQwI,MAAM,iBANtB,6BAQgB0D,EARhB,uBASQlM,QAAQwI,MAAM,4BATtB,oDAcckE,EAAc3P,EAAMe,KAAMgH,EAAcoH,GAdtD,QAeQyF,EAAgB,IAfxB,kDAiBQ5F,MAAM,2BAAD,cAjBb,2DArE0B,oEA0F1B,sBAAA3E,EAAA,+EAEc+D,IAFd,sDAIQnL,QAAQwI,MAAR,oCAJR,yDA1F0B,sBAwH1B,SAAS6J,KACLD,GAA2B,CAAErN,KAAM,mBAGvC,IAAMuN,GACa,OAAfrB,GACgB,OAAfA,IACI/E,GACG4F,EAAY9G,sBACZ8G,EAAY7G,kBAClBsH,GACa,OAAftB,GACgB,OAAfA,IACI/E,IACA4F,EAAY9G,uBACZ8G,EAAY7G,iBAErB,OACI,sBAAK3N,GAAG,WAAR,UACKiV,IACG,eAAC,EAAD,WACI,cAAC,EAAD,CACIzU,KAAMf,EAAMe,KACZsB,UACIrC,EAAMe,OAAN,UAAciM,EAAahN,EAAMe,KAAKyJ,YAAtC,aAAc,EAA8B/C,SAGpD,sBACIrH,QAlDpB,SACIwL,GAEAA,EAAEC,iBACFwJ,GAA2B,CAAErN,KAAM,4BA+CnB/H,UAAU,QACVQ,MAAO,CACHC,OAAQ,SACRgM,QAAS,WACTnJ,QAAS,OACTiF,WAAY,SACZC,eAAgB,UARxB,6BAYI,qBACIhI,MAAO,CACH8C,QAAS,OACTjC,OAAQ,OACRC,MAAO,OACPU,gBAAiB,QACjBuG,WAAY,SACZC,eAAgB,SAChB0E,MAAO,QACPP,aAAc,MACdlL,WAAY,OAVpB,SAaI,cAAC,IAAD,CAAiB2L,KAAMoI,IAAcpU,KAAM,YAInD,qBACIZ,MAAO,CACHa,OAAQ,OACRoL,QAAS,gBAHjB,SAMI,8BACI,qBACIjM,MAAO,CACHiV,SAAU,QAFlB,SAKKtF,EAActP,KAAI,SAACsQ,GAAD,OACf,cAAC,EAAD,CAEI9Q,aAAc8Q,EACd/Q,eAAgB+U,IAFXhE,EAAM7Q,aAQ/B,cAAC,EAAD,CACI6N,OAvMM,4CAwMNuH,iBA/FpB,SACI/J,GAEAA,EAAEC,iBACFwJ,GAA2B,CAAErN,KAAM,6BAgG9BuN,IACG,cAACjN,EAAD,UACKyK,GAAuB/S,EAAMe,KAC1B,qCACI,cAAC,EAAD,CACI6U,SAAyB,OAAf1B,EAAsB,IAAM,IACtChH,KAAMoI,GACNhV,aAAcyS,IAElB,cAAC,EAAD,CACIzM,OAAQtG,EAAMe,KAAKyJ,IACnBlK,aAAcyS,EACdzN,SAAUA,EACVkB,SAAUwG,IAEd,cAAC,EAAD,CAEIjF,aAAcA,EACdF,oBArL5B,SAA6B+D,GACzBA,EAAEC,iBACF+I,EAAgBhJ,EAAEI,OAAOlE,QAoLDG,WAhOF,kDAmON8M,EAAY9G,qBACZ,qCACI,eAAC/L,EAAD,WACI,qBACI9B,QAASkV,GACT7U,MAAO,CACH8C,QAAS,OACTtB,gBAAiB,QACjBkL,MAAO,QACPP,aAAc,MACdQ,OAAQ,UACRV,QAAS,iBARjB,SAWI,cAAC,IAAD,CACIW,KAAMC,IACNjM,KAAM,SAGd,oBAAIZ,MAAO,CAAEiB,WAAY,OAAzB,8BAGA,qBACItB,QA1PN,4CA2PMK,MAAO,CACH2M,OAAQ,UACRV,QAAS,gBACThL,WAAY,QALpB,uBAWJ,cAAC,EAAD,CACI4E,OAAM,UAAEtG,EAAMe,YAAR,aAAE,EAAYyJ,IACpB8B,MAAOA,EACPU,aAAcA,EACdb,UAAW+I,GACXpJ,aAAcqJ,QAGtBJ,EAAY7G,iBACZ,cAACX,EAAD,CACI3C,aAAa,UAAA5K,EAAMe,YAAN,eAAY6J,cAAe,GACxC+C,cA/JxB,SACIkI,GACD,IAAD,EACE,UAAA7V,EAAMe,YAAN,SAAY4M,cAAckI,GAAUrK,OAAM,SAACC,GACvCuD,MAAM,uCAAD,OAAwCvD,UA6JjC,WCnUb,SAAazL,GAChB,MAAgCmJ,IAAhC,mBAAOpI,EAAP,KAAa2H,EAAb,KAEA,OAAO3H,EACH,cAACiP,GAAD,aAAkBjP,KAAMA,GAAUf,IAElC,cAACuI,EAAD,CAAQG,gBAAiBA,MKC/BoN,GAAcC,QACa,cAA7B3B,OAAO4B,SAASC,UAEiB,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACrB,2DA2CZ,SAASC,GAAgBC,EAAezN,GACpC0N,UAAUC,cACLC,SAASH,GACTpE,MAAK,SAACwE,GACHA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBjP,QACb4O,UAAUC,cAAcO,YAIxB5T,QAAQC,IACJ,+GAKAyF,GAAUA,EAAOmO,UACjBnO,EAAOmO,SAASN,KAMpBvT,QAAQC,IAAI,sCAGRyF,GAAUA,EAAOoO,WACjBpO,EAAOoO,UAAUP,WAOxChL,OAAM,SAACC,GACJxI,QAAQwI,MAAM,4CAA6CA,MCnGvE,IAYeuL,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlF,MAAK,YAAkD,IAA/CmF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,SFgBrB,SAAkBjP,GACrB,GAA6C,kBAAmB0N,UAAW,CAGvE,GADkB,IAAIwB,IAAIC,YAAwB1D,OAAO4B,SAAS+B,MACpDC,SAAW5D,OAAO4B,SAASgC,OAIrC,OAGJ5D,OAAOK,iBAAiB,QAAQ,WAC5B,IAAM2B,EAAK,UAAM0B,YAAN,sBAEPhC,KAgEhB,SAAiCM,EAAezN,GAE5CsP,MAAM7B,EAAO,CACT8B,QAAS,CAAE,iBAAkB,YAE5BlG,MAAK,SAACmG,GAEH,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAC0C,IAAvCA,EAAYG,QAAQ,cAGxBlC,UAAUC,cAAckC,MAAMxG,MAAK,SAACwE,GAChCA,EAAaiC,aAAazG,MAAK,WAC3BoC,OAAO4B,SAAS0C,eAKxBvC,GAAgBC,EAAOzN,MAG9B6C,OAAM,WACHvI,QAAQC,IACJ,oEAxFAyV,CAAwBvC,EAAOzN,GAI/B0N,UAAUC,cAAckC,MAAMxG,MAAK,WAC/B/O,QAAQC,IACJ,+GAMRiT,GAAgBC,EAAOzN,OEtCvCiQ,GAKA5B,O","file":"static/js/main.ab232d29.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Avatar_root__3e7La\",\"img\":\"Avatar_img__9sg0P\",\"badge\":\"Avatar_badge__3M4IC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ChatPreview_root__3PcDC\",\"textRoot\":\"ChatPreview_textRoot__1HIVj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Header_root__jsaeH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"BottomSettings_root__1cJ2q\"};","import ChatPreview from './ChatPreview'\n\nexport default ChatPreview\n","import * as React from 'react'\nimport styles from './ChatPreview.module.scss'\nimport '../../__shared__/styles.scss'\nimport { ClientConversation } from '../../__shared__/models'\n\ninterface Props {\n    conversation: ClientConversation\n    onPreviewClick: (id: string) => void\n}\n\nexport default function ChatPreview(props: Props) {\n    function onPreviewClick() {\n        props.onPreviewClick(props.conversation.id)\n    }\n\n    return (\n        <div className={styles.root} onClick={onPreviewClick}>\n            <div className={styles.textRoot}>\n                <h4 style={{ margin: '0 0 8px' }}>\n                    {props.conversation.name || props.conversation.id}\n                </h4>\n                <p style={{ margin: '0' }}>\n                    {props.conversation.otherUsers.length > 0\n                        ? props.conversation.otherUsers.map(\n                              (user, index, original) => {\n                                  if (\n                                      original.length === 1 ||\n                                      index === original.length - 1\n                                  ) {\n                                      return user.userName || user.id\n                                  } else {\n                                      return `${user.userName || user.id}, `\n                                  }\n                              }\n                          )\n                        : 'No users here.'}\n                </p>\n            </div>\n        </div>\n    )\n}\n","import * as React from 'react'\nimport { ClientUserStatus } from '../../__shared__/types/userStatus'\nimport styles from './Avatar.module.scss'\n\nexport interface AvatarProps {\n    photoURL: string\n    size?: 'sm' | 'lg'\n    badgeState?: ClientUserStatus['state'] | null\n    style?: React.CSSProperties\n}\n\nexport default function Avatar(props: AvatarProps) {\n    const avatarDimensions =\n        props.size === 'sm'\n            ? {\n                  height: '28px',\n                  width: '28px',\n              }\n            : {\n                  height: '36px',\n                  width: '36px',\n              }\n    const badgeDimensions =\n        props.size === 'sm'\n            ? {\n                  height: '8px',\n                  width: '8px',\n                  marginTop: '-12px',\n                  marginLeft: '21px',\n              }\n            : {\n                  height: '11px',\n                  width: '11px',\n                  marginTop: '-14px',\n                  marginLeft: '24px',\n              }\n    return (\n        <div\n            className={styles.root}\n            style={{ ...avatarDimensions, ...props.style }}\n        >\n            <img\n                src={props.photoURL}\n                alt=\"profile pic\"\n                className={styles.img}\n                style={avatarDimensions}\n            />\n            {props.badgeState && (\n                <div\n                    className={styles.badge}\n                    style={{\n                        backgroundColor:\n                            props.badgeState === 'online'\n                                ? '#57ba14'\n                                : '#f9fff5',\n                        ...badgeDimensions,\n                    }}\n                ></div>\n            )}\n        </div>\n    )\n}\n","import * as React from 'react'\nimport styles from './Header.module.scss'\n\ninterface Props {\n    children?: React.ReactNode\n}\n\nexport default function Header(props: Props) {\n    return <header className={styles.root}>{props.children}</header>\n}\n","import HomeHeader from './HomeHeader'\n\nexport default HomeHeader\n","import * as React from 'react'\nimport firebase from 'firebase'\nimport Avatar from '../Avatar'\n// import styles from './HomeHeader.module.scss'\nimport Header from '../Header'\n\ninterface Props {\n    user: firebase.User | null\n    userState: 'online' | 'offline' | null\n}\n\nexport default function HomeHeader(props: Props) {\n    return (\n        <Header>\n            {props.user?.photoURL && (\n                <Avatar\n                    photoURL={props.user.photoURL}\n                    size={'sm'}\n                    badgeState={props.userState}\n                />\n            )}\n\n            <h3\n                style={{\n                    marginLeft: '16px',\n                    fontSize: '1.3em',\n                }}\n            >\n                Whats Up\n            </h3>\n        </Header>\n    )\n}\n","import InteractionMessage from './InteractionMessage'\n\nexport default InteractionMessage\n","import * as React from 'react'\nimport { ClientMessage } from '../../__shared__/models'\nimport { ClientUserStatus } from '../../__shared__/types/userStatus'\nimport Avatar, { AvatarProps } from '../Avatar'\nimport './InteractionMessage.scss'\n\nexport interface InteractionMessageProps {\n    isSender: boolean\n    userStatus: ClientUserStatus | undefined\n    message: ClientMessage\n    avatarProps?: AvatarProps\n    spacePlaceholder?: boolean\n    side?: 'left' | 'right'\n    showName?: boolean\n    squishAbove?: boolean\n    squishBelow?: boolean\n    styles?: React.CSSProperties\n    newestMessageRef?: React.MutableRefObject<HTMLDivElement | null>\n    placementClass?: string\n    marginTop?: string\n}\n\nexport default function InteractionMessage(props: InteractionMessageProps) {\n    const [showTime, setShowTime] = React.useState(false)\n\n    const personClass = props.isSender\n        ? 'interactionmessage-self'\n        : 'interactionmessage-friend'\n    const placementClass = props.placementClass ? props.placementClass : ''\n\n    const borderStyling: React.CSSProperties = {}\n    if (props.squishAbove) {\n        const property = props.isSender\n            ? 'borderTopRightRadius'\n            : 'borderTopLeftRadius'\n        borderStyling[property] = '3px'\n    }\n    if (props.squishBelow) {\n        const property = props.isSender\n            ? 'borderBottomRightRadius'\n            : 'borderBottomLeftRadius'\n        borderStyling[property] = '3px'\n    }\n\n    console.log(props.message.createdAt)\n\n    return (\n        <div\n            className={placementClass}\n            ref={props.newestMessageRef}\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                ...(props.marginTop\n                    ? { marginTop: props.marginTop }\n                    : undefined),\n            }}\n        >\n            {props.showName && !props.isSender && (\n                <p\n                    style={{\n                        marginBottom: '2px',\n                        marginTop: '0px',\n                        textAlign: props.isSender ? 'right' : 'left',\n                        fontSize: '12px',\n                        ...(!props.isSender ? { marginLeft: '56px' } : null), // profile pic size + account for border radius\n                    }}\n                >\n                    {props.message.senderName}\n                </p>\n            )}\n\n            <div\n                style={{\n                    display: 'flex',\n                    alignSelf:\n                        props.side === 'right'\n                            ? 'flex-end'\n                            : props.side === 'left'\n                            ? 'flex-start'\n                            : undefined,\n                }}\n            >\n                {!props.isSender && props.avatarProps && (\n                    <div\n                        style={{\n                            marginRight: '8px',\n                            height: '36px',\n                            width: '36px',\n                        }}\n                    >\n                        <Avatar {...props.avatarProps} />\n                    </div>\n                )}\n                {!props.isSender &&\n                    !props.avatarProps &&\n                    props.spacePlaceholder && (\n                        <div\n                            style={{\n                                marginRight: '8px',\n                                height: '36px',\n                                width: '36px',\n                            }}\n                        ></div>\n                    )}\n                <p\n                    id=\"interactionmessage-text\"\n                    className={personClass}\n                    style={{ ...borderStyling, whiteSpace: 'pre-wrap' }}\n                    onClick={() => setShowTime((prev) => !prev)}\n                >\n                    {props.message.content}\n                </p>\n            </div>\n            {showTime && (\n                <p\n                    style={{\n                        marginTop: '4px',\n                        textAlign: props.side,\n                        ...(!props.isSender\n                            ? { marginLeft: '56px' }\n                            : { marginRight: '12px' }),\n                        fontSize: '10px',\n                        marginBottom: '0px',\n                    }}\n                >\n                    {new Date(props.message.createdAt).toLocaleString()}\n                </p>\n            )}\n        </div>\n    )\n}\n","const MILLIS_IN_SEC = 1000\nconst SECS_IN_MIN = 60\nconst MINS_IN_HOUR = 60\nconst MILLIS_IN_HOUR = MILLIS_IN_SEC * SECS_IN_MIN * MINS_IN_HOUR\nconst MILLIS_IN_MIN = MILLIS_IN_SEC * SECS_IN_MIN\nconst HOURS_IN_DAY = 24\n\nexport function convertToMillis({\n    days,\n    hours,\n    mins,\n    secs,\n    millis,\n}: Partial<\n    Record<'days' | 'hours' | 'mins' | 'secs' | 'millis', number>\n>): number {\n    let runningVal = 0\n    if (days) {\n        runningVal += days * HOURS_IN_DAY * MILLIS_IN_HOUR\n    }\n    if (hours) {\n        runningVal += hours * MILLIS_IN_HOUR\n    }\n    if (mins) {\n        runningVal += mins * MILLIS_IN_MIN\n    }\n    if (secs) {\n        runningVal += secs * MILLIS_IN_SEC\n    }\n    if (millis) {\n        runningVal += millis\n    }\n    return runningVal\n}\n\nexport function convertToSecs({\n    millis,\n}: Partial<Record<'millis', number>>): number {\n    let runningVal = 0\n    if (millis) {\n        runningVal += millis / MILLIS_IN_SEC\n    }\n    return runningVal\n}\n","import Interaction from './Interaction'\n\nexport default Interaction\n","import * as React from 'react'\nimport './Interaction.scss'\nimport InteractionMessage from '../InteractionMessage'\nimport { ClientConversation, ClientMessage } from '../../__shared__/models'\nimport { ClientUserStatuses } from '../../__shared__/types/userStatus'\nimport { convertToMillis, convertToSecs } from '../../__shared__/utils/dateTime'\nimport { AvatarProps } from '../Avatar'\n\ninterface MessageStyling {\n    squishAbove: {\n        [messageId: string]: boolean\n    }\n    squishBelow: {\n        [messageId: string]: boolean\n    }\n    messagesWithoutAvatar: {\n        [messageId: string]: boolean\n    }\n    marginTop: {\n        [messageId: string]: string\n    }\n}\n\ninterface Props {\n    userId: string\n    conversation: ClientConversation\n    messages: ClientMessage[]\n    statuses: ClientUserStatuses\n}\n\nexport default function Interaction(props: Props) {\n    const newestMessageRef = React.useRef<HTMLDivElement | null>(null)\n\n    React.useEffect(() => {\n        if (newestMessageRef.current) {\n            newestMessageRef.current.scrollIntoView({ behavior: 'smooth' })\n        }\n    }, [props.messages.length])\n\n    /**\n     * Calculates which message ids (and in turn, the InteractionMessage) will need\n     * to be styled differently with a squished effect.\n     */\n    function calculateMessageStyling(): MessageStyling {\n        const styling: MessageStyling = {\n            squishAbove: {},\n            squishBelow: {},\n            messagesWithoutAvatar: {},\n            marginTop: {},\n        }\n\n        return props.messages.reduce(\n            (previousStyling, currentMessage, index, arr) => {\n                const currentMessageSeconds = convertToSecs({\n                    millis: currentMessage.createdAt,\n                })\n                // Look behind - only when there is a previous message for same user\n                if (index > 0) {\n                    if (arr[index - 1].sender === currentMessage.sender) {\n                        const previousMessageTime = arr[index - 1].createdAt\n                        const secondsBetweenLastMessage =\n                            currentMessageSeconds -\n                            convertToSecs({\n                                millis: previousMessageTime,\n                            })\n                        if (secondsBetweenLastMessage < 60) {\n                            previousStyling.squishAbove[\n                                currentMessage.id\n                            ] = true\n                            previousStyling.marginTop[currentMessage.id] = '1px'\n                        } else {\n                            previousStyling.marginTop[currentMessage.id] =\n                                '12px'\n                        }\n                    } else {\n                        previousStyling.marginTop[currentMessage.id] = '30px'\n                    }\n                }\n                // Look ahead - only when a next message exists for same user\n                if (\n                    arr.length > 0 &&\n                    index < arr.length - 1 &&\n                    arr[index + 1].sender === currentMessage.sender\n                ) {\n                    const nextMessageTime = arr[index + 1].createdAt\n                    const secondsBetweenNextMessage =\n                        convertToSecs({\n                            millis: nextMessageTime,\n                        }) - currentMessageSeconds\n                    if (secondsBetweenNextMessage < 60) {\n                        previousStyling.squishBelow[currentMessage.id] = true\n                        previousStyling.messagesWithoutAvatar[\n                            currentMessage.id\n                        ] = true\n                    }\n                }\n                return previousStyling\n            },\n            styling\n        )\n    }\n\n    function renderMessagesTimeline() {\n        const styling = calculateMessageStyling()\n        const now = new Date() // race condition possible, but chances are small\n        const dayFormatter = new Intl.DateTimeFormat('en-US', {\n            weekday: 'long',\n        })\n        const monthFormatter = new Intl.DateTimeFormat('en-US', {\n            month: 'short',\n        })\n        return props.messages.map((message, index, arr) => {\n            const isSender = !!(props.userId && props.userId === message.sender)\n            const userStatus = props.statuses[message.sender]\n            const currentDate = new Date(message.createdAt)\n            let showTimelineAboveMessage: boolean = false\n\n            // show timeline if current message is first in the list,\n            // or if the previous message is a different day tha the current message\n            // or if the previous message is 3 or more hours since the current message\n\n            if (index === 0) {\n                showTimelineAboveMessage = true\n            } else {\n                const pastDate = new Date(arr[index - 1].createdAt)\n                showTimelineAboveMessage =\n                    index === 0 ||\n                    pastDate.toDateString() !== currentDate.toDateString() ||\n                    pastDate.getTime() >=\n                        currentDate.getTime() + convertToMillis({ hours: 3 })\n            }\n\n            let hours: number | string = currentDate.getHours()\n            let minutes: number | string = currentDate.getMinutes()\n            hours = hours < 10 ? `${0}${hours}` : hours\n            minutes = minutes < 10 ? `${0}${minutes}` : minutes\n\n            let timelineTime = `${hours}:${minutes}`\n            let timelineDay\n            if (showTimelineAboveMessage) {\n                if (currentDate.toDateString() === now.toDateString()) {\n                    timelineDay = 'Today'\n                } else if (\n                    currentDate.toDateString() ===\n                    new Date(\n                        now.getTime() - convertToMillis({ days: 1 })\n                    ).toDateString()\n                ) {\n                    timelineDay = 'Yesterday'\n                } else {\n                    // When calculating messages, we want to see if a message is\n                    // within 6 days inclusive.\n                    const nowOffset = convertToMillis({\n                        hours: now.getHours(),\n                        mins: now.getMinutes(),\n                        secs: now.getSeconds(),\n                        millis: now.getMilliseconds(),\n                    })\n                    // Within last 6 running days inclusive.\n                    // one day has 1000*60*60*24 milliseconds)\n                    if (\n                        currentDate.getTime() >\n                        new Date(\n                            now.getTime() -\n                                (convertToMillis({ days: 6 }) + nowOffset)\n                        ).getTime()\n                    ) {\n                        timelineDay = dayFormatter.format(currentDate)\n                    } else {\n                        const month = monthFormatter.format(currentDate)\n                        timelineDay = `${dayFormatter.format(\n                            currentDate\n                        )}, ${month} ${currentDate.getDate()}`\n                    }\n                }\n            }\n\n            const avatarAvailable: boolean =\n                !!message.photoURL && !styling.messagesWithoutAvatar[message.id]\n\n            return (\n                <React.Fragment key={`rf-${message.id}`}>\n                    {showTimelineAboveMessage && timelineDay && (\n                        <p\n                            key={`tmln-${message.id}`}\n                            style={{\n                                textAlign: 'center',\n                                marginTop: '30px',\n                                marginBottom: '8px',\n                            }}\n                        >\n                            {`${timelineDay} - ${timelineTime}`}\n                        </p>\n                    )}\n                    <InteractionMessage\n                        key={message.id}\n                        message={message}\n                        newestMessageRef={\n                            index === props.messages.length - 1\n                                ? newestMessageRef\n                                : undefined\n                        }\n                        isSender={isSender}\n                        side={isSender ? 'right' : 'left'}\n                        userStatus={userStatus}\n                        spacePlaceholder={!isSender && !avatarAvailable}\n                        avatarProps={\n                            !isSender && avatarAvailable\n                                ? ({\n                                      photoURL: message.photoURL,\n                                      badgeState: userStatus.state,\n                                  } as AvatarProps)\n                                : undefined\n                        }\n                        squishAbove={styling.squishAbove[message.id]}\n                        squishBelow={styling.squishBelow[message.id]}\n                        showName={!styling.squishAbove[message.id]}\n                        placementClass={\n                            props.userId && props.userId === message.sender\n                                ? 'interactionmessage-placement-self'\n                                : 'interactionmessage-placement-friend'\n                        }\n                        marginTop={styling.marginTop[message.id]}\n                    />\n                </React.Fragment>\n            )\n        })\n    }\n\n    return <div id=\"interaction-root\">{renderMessagesTimeline()}</div>\n}\n\nexport type { Props as InteractionProps }\n","import InteractionMessageEditor from './InteractionMessageEditor'\n\nexport default InteractionMessageEditor\n","import * as React from 'react'\nimport './InteractionMessageEditor.scss'\n\ninterface Props {\n    currentDraft: string\n    handleSend(e: React.MouseEvent<HTMLInputElement, MouseEvent>): void\n    handleMessageChange(e: React.ChangeEvent<HTMLTextAreaElement>): void\n}\n\nexport default function InteractionMessageEditor(props: Props) {\n    return (\n        <div id=\"interactionmessageeditor-root\">\n            <textarea\n                onChange={props.handleMessageChange}\n                value={props.currentDraft}\n            />\n            <input type=\"button\" value=\"Send\" onClick={props.handleSend} />\n        </div>\n    )\n}\n","import React from 'react'\n\nexport function ChatsLayout(props: { children: React.ReactNode }) {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                flexGrow: 2,\n                flexBasis: 0,\n                maxWidth: '700px',\n            }}\n        >\n            {props.children}\n        </div>\n    )\n}\n\nexport function InteractionLayout(props: { children: React.ReactNode }) {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'column',\n                backgroundColor: 'grey',\n                flexGrow: 3,\n                flexBasis: 0,\n            }}\n        >\n            {props.children}\n        </div>\n    )\n}\n","import * as React from 'react'\nimport Header from '../Header'\n\ninterface Props {\n    showSignInPopup: (method: 'google' | 'github') => void\n}\n\nexport function SignIn(props: Props) {\n    return (\n        <div style={{ height: '100%' }}>\n            <Header>\n                <h3\n                    style={{\n                        marginLeft: '16px',\n                        fontSize: '1.3em',\n                    }}\n                >\n                    Whats Up\n                </h3>\n            </Header>\n            <div\n                style={{\n                    height: '100%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    flexDirection: 'column',\n                }}\n            >\n                <button\n                    style={{\n                        margin: '4px',\n                        fontSize: '24px',\n                        marginBottom: '16px',\n                    }}\n                    onClick={() => props.showSignInPopup('google')}\n                >\n                    Sign in with Google\n                </button>\n                <button\n                    style={{ margin: '4px', fontSize: '24px' }}\n                    onClick={() => props.showSignInPopup('github')}\n                >\n                    Sign in with Github\n                </button>\n            </div>\n        </div>\n    )\n}\n","import firebase from 'firebase'\nimport { useEffect, useState } from 'react'\nimport useLocalStorageState from '../utils/useLocalStorageState'\n\nexport type SupportedAuthProvider = 'google' | 'github'\n\nconst config = {\n    apiKey: 'AIzaSyA51jM6IryfHm1HnzmXo66QQQCcRK1ld0M',\n    authDomain: 'whats-up-ce34e.firebaseapp.com',\n    projectId: 'whats-up-ce34e',\n    storageBucket: 'whats-up-ce34e.appspot.com',\n    messagingSenderId: '6258283268',\n    appId: '1:6258283268:web:91c3f62da6da184d583651',\n    measurementId: 'G-K13ZDZ04JX',\n}\n\nexport default function useFirebaseAuth(): [\n    firebase.User | null,\n    (method: SupportedAuthProvider) => void\n] {\n    const [user, setUser] = useLocalStorageState<firebase.User>('firebaseUser')\n    const [\n        githubProvider,\n        setGithubProvider,\n    ] = useState<firebase.auth.GithubAuthProvider | null>(null)\n    const [\n        googleProvider,\n        setGoogleProvider,\n    ] = useState<firebase.auth.GoogleAuthProvider | null>(null)\n\n    function showSignInPopup(method: SupportedAuthProvider) {\n        let selectedProvider\n        if (method === 'github' && githubProvider) {\n            selectedProvider = githubProvider\n        } else if (method === 'google' && googleProvider) {\n            selectedProvider = googleProvider\n        } else {\n            return\n        }\n\n        firebase\n            .auth()\n            .signInWithPopup(selectedProvider)\n            .catch((error) => {\n                console.error(`Unable to log in with error ${error}`)\n            })\n    }\n\n    async function createUserInFirebaseIfNonexistent(user: firebase.User) {\n        const snapshot = await firebase\n            .database()\n            .ref(`users/${user.uid}`)\n            .once('value')\n        if (snapshot.val()) {\n            await firebase.database().ref(`users/${user.uid}`).update({\n                userName: user.displayName,\n                photoURL: user.photoURL,\n            })\n        } else {\n            console.log(`User ${user.uid} does not exist. Creating now.`)\n            await firebase.database().ref(`users/${user.uid}`).set({\n                userName: user.displayName,\n                photoURL: user.photoURL,\n            })\n        }\n    }\n\n    useEffect(() => {\n        if (firebase.apps.length === 0) {\n            firebase.initializeApp(config)\n        }\n        const githubProvider = new firebase.auth.GithubAuthProvider()\n        const googleProvider = new firebase.auth.GoogleAuthProvider()\n        setGithubProvider(githubProvider)\n        setGoogleProvider(googleProvider)\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n                // log in\n                setUser(user)\n                createUserInFirebaseIfNonexistent(user)\n            } else {\n                // log out\n                setUser(null)\n            }\n        })\n        // Don't need to worry about setUser since it's the setter from useState\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return [user, showSignInPopup]\n}\n","import { SetStateAction } from 'react'\nimport { Dispatch, useEffect, useState } from 'react'\n\nexport default function useLocalStorageState<T = null>(\n    key: string\n): [T | null, Dispatch<SetStateAction<T | null>>] {\n    const [value, setValue] = useState<T | null>(() => {\n        const storedValue = localStorage.getItem(key)\n        const parsed = !!storedValue && JSON.parse(storedValue)\n        if (!parsed) {\n            return null\n        } else {\n            return parsed\n        }\n    })\n\n    useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(value))\n    }, [key, value])\n\n    return [value, setValue]\n}\n","import InteractionCreator from \"./InteractionCreator\";\n\nexport default InteractionCreator","import * as React from 'react'\nimport { ClientUser } from '../../__shared__/types/user'\nimport { ClientUserStatuses } from '../../__shared__/types/userStatus'\nimport {\n    ConversationFormAction,\n    ConversationFormState,\n} from '../App/useConversationFormReducer'\nimport Avatar from '../Avatar'\nimport './InteractionCreator.scss'\n\ninterface Props {\n    userId: string | undefined\n    users: ClientUser[]\n    userStatuses: ClientUserStatuses\n    formState: ConversationFormState\n    dispatchForm: React.Dispatch<ConversationFormAction>\n}\n\nexport default function InteractionCreator(props: Props) {\n    function handlePersonSelect(e: React.ChangeEvent<HTMLInputElement>) {\n        e.preventDefault()\n        props.dispatchForm({\n            type: 'toggle_person',\n            payload: e.target.dataset.personid as string,\n        })\n    }\n\n    return (\n        <div id=\"InteractionCreator-root\">\n            <h4 style={{ marginTop: '0' }}>\n                Choose a conversation name (optional)\n            </h4>\n            <input\n                id=\"conversation-name-input\"\n                type=\"text\"\n                value={props.formState.newConversationName}\n                onChange={(e) =>\n                    props.dispatchForm({\n                        type: 'set_conversation_name',\n                        payload: e.currentTarget.value,\n                    })\n                }\n            ></input>\n\n            <h4>Select people to add *</h4>\n            <div>\n                {props.users\n                    .filter((user) => user.id !== props.userId)\n                    .map((user) => {\n                        return (\n                            <div\n                                key={`pselect-${user.id}`}\n                                className={'hover'}\n                                style={{\n                                    display: 'flex',\n                                    justifyContent: 'left',\n                                    alignItems: 'center',\n                                    minWidth: '20px',\n                                    userSelect: 'none',\n                                    padding: '8px 16px',\n                                    border: '1px solid #737373',\n                                    borderRadius: '3px',\n                                    marginTop: '8px',\n                                    backgroundColor: props.formState.peopleForNewConversation.includes(\n                                        user.id\n                                    )\n                                        ? '#696969'\n                                        : undefined,\n                                }}\n                                data-personid={user.id}\n                                // @ts-ignore\n                                onClick={handlePersonSelect}\n                            >\n                                {user.photoURL && (\n                                    <Avatar\n                                        photoURL={user.photoURL}\n                                        badgeState={\n                                            props.userStatuses[user.id].state\n                                        }\n                                        style={{\n                                            marginRight: '8px',\n                                        }}\n                                    />\n                                )}\n                                {user.userName}\n                            </div>\n                        )\n                    })}\n            </div>\n        </div>\n    )\n}\n\nexport type { Props as InteractionCreatorProps }\n","import InteractionBar from './InteractionBar'\n\nexport default InteractionBar\n","import * as React from 'react'\nimport { ClientConversation } from '../../__shared__/models'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\nimport Header from '../Header'\n\ninterface Props {\n    back: () => void\n    backIcon: string\n    conversation: ClientConversation\n}\n\nexport default function InteractionBar(props: Props) {\n    return (\n        <Header>\n            <div\n                onClick={props.back}\n                style={{\n                    display: 'flex',\n                    backgroundColor: 'black',\n                    color: 'white',\n                    borderRadius: '5px',\n                    cursor: 'pointer',\n                    padding: '8px 8px 8px 0',\n                }}\n            >\n                <FontAwesomeIcon icon={faArrowLeft} size={'lg'} />\n            </div>\n            <h3 style={{ marginLeft: '8px' }}>{props.conversation.name}</h3>\n        </Header>\n    )\n}\n","import * as React from 'react'\nimport firebase from 'firebase'\n\ninterface Props {\n    displayName: string\n    updateProfile: (\n        userInfo: Partial<Pick<firebase.UserInfo, 'displayName' | 'photoURL'>>\n    ) => void\n}\n\nexport function UserSettings(props: Props) {\n    const [newUsername, setNewUsername] = React.useState(props.displayName)\n\n    function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        if (newUsername) {\n            props.updateProfile({\n                displayName: newUsername,\n            })\n        } else {\n            console.error('Username was not valid.')\n        }\n    }\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n            }}\n        >\n            <form\n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    padding: '8px',\n                }}\n                onSubmit={handleSubmit}\n            >\n                <div\n                    style={{\n                        display: 'flex',\n                        padding: '4px',\n                        marginBottom: '16px',\n                        flexDirection: 'column',\n                    }}\n                >\n                    <label\n                        htmlFor=\"username-input\"\n                        style={{ paddingBottom: '4px' }}\n                    >\n                        Username\n                    </label>\n                    <input\n                        id=\"username-input\"\n                        type=\"text\"\n                        placeholder=\"Type in the user name\"\n                        value={newUsername}\n                        onChange={(e) => setNewUsername(e.target.value)}\n                    ></input>\n                </div>\n                <input type=\"submit\" value=\"Save\"></input>\n            </form>\n        </div>\n    )\n}\n","import React, { useReducer, Reducer } from 'react'\n\nexport type LayoutStateActionType =\n    | 'show_conversation_form'\n    | 'show_user_settings'\n    | 'select_conversation'\n    | 'return_to_main'\n\ninterface Action {\n    type: LayoutStateActionType\n}\n\ninterface State {\n    showConversationForm: boolean\n    showUserSettings: boolean\n}\n\nfunction layoutStateReducer(state: State, action: Action): State {\n    switch (action.type) {\n        case 'return_to_main':\n            return {\n                ...state,\n                showConversationForm: false,\n                showUserSettings: false,\n            }\n        case 'select_conversation':\n            return {\n                ...state,\n                showConversationForm: false,\n                showUserSettings: false,\n            }\n        case 'show_conversation_form':\n            return {\n                ...state,\n                showConversationForm: true,\n                showUserSettings: false,\n            }\n        case 'show_user_settings':\n            return {\n                ...state,\n                showConversationForm: false,\n                showUserSettings: true,\n            }\n        default:\n            return state\n    }\n}\n\nexport function useLayoutStateReducer(): [State, React.Dispatch<Action>] {\n    const [state, dispatch] = useReducer<Reducer<State, Action>>(\n        layoutStateReducer,\n        {\n            showConversationForm: false,\n            showUserSettings: false,\n        }\n    )\n\n    return [state, dispatch]\n}\n","import React from 'react'\nimport styles from './BottomSettings.module.scss'\n\ninterface Props {\n    logOut: () => void\n    openUserSettings: (\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    ) => void\n}\n\nfunction BottomSettings(props: Props) {\n    return (\n        <div className={styles.root}>\n            {/* <button\n                onClick={props.openUserSettings}\n                style={{ marginBottom: '8px' }}\n            >\n                Edit User Settings\n            </button> */}\n            <button onClick={props.logOut}>Log Out</button>\n        </div>\n    )\n}\n\nexport default BottomSettings\n","import React, { useReducer, Reducer } from 'react'\n\ntype ActionType = 'set_conversation_name' | 'toggle_person'\n\ninterface Action {\n    type: ActionType\n    payload: string\n}\n\n// TODO make these names shorter\ninterface State {\n    newConversationName: string\n    peopleForNewConversation: string[]\n}\n\nfunction conversationFormReducer(state: State, action: Action): State {\n    switch (action.type) {\n        case 'set_conversation_name':\n            return {\n                ...state,\n                newConversationName: action.payload,\n            }\n        case 'toggle_person':\n            if (state.peopleForNewConversation.includes(action.payload)) {\n                return {\n                    ...state,\n                    peopleForNewConversation: state.peopleForNewConversation.filter(\n                        (person) => person !== action.payload\n                    ),\n                }\n            } else {\n                return {\n                    ...state,\n                    peopleForNewConversation: [\n                        ...state.peopleForNewConversation,\n                        action.payload,\n                    ],\n                }\n            }\n        default:\n            return state\n    }\n}\n\nexport function useConversationFormReducer(): [State, React.Dispatch<Action>] {\n    const [state, dispatch] = useReducer<Reducer<State, Action>>(\n        conversationFormReducer,\n        {\n            newConversationName: '',\n            peopleForNewConversation: [],\n        }\n    )\n\n    return [state, dispatch]\n}\n\nexport type { State as ConversationFormState }\nexport type { Action as ConversationFormAction }\n","import firebase from 'firebase'\n\n// TODO use the interface from hook instead of copy-pasting here\ninterface ConversationData {\n    name: string\n    peopleToAdd: string[]\n}\n\nexport async function createConversation(\n    conversationData: ConversationData,\n    user: firebase.User\n): Promise<string | null> {\n    const { name, peopleToAdd } = conversationData\n    if (peopleToAdd.length === 0) {\n        console.error('no friends to add')\n        return null\n    }\n\n    try {\n        const db = firebase.database()\n\n        // Check if friendIds are valid\n        const friendSnapshots = await Promise.all(\n            peopleToAdd.map((personId) => {\n                return db.ref(`users/${personId}`).once('value')\n            })\n        )\n\n        for (let snapshot of friendSnapshots) {\n            if (!snapshot.val()) {\n                alert(`Friend ID ${snapshot.key} does not exist.`)\n                return null\n            }\n        }\n\n        // Create new conversation\n        const conversationRef = await db.ref(`conversations`).push()\n        const conversationId = conversationRef.key\n\n        await conversationRef.set({\n            createdAt: firebase.database.ServerValue.TIMESTAMP,\n            creatorId: user,\n            name: name,\n        })\n\n        const everythingElse: Record<string, any> = {}\n\n        // For self\n        everythingElse[`userConversations/${user.uid}/${conversationId}`] = {\n            invitedBy: user.uid,\n        }\n        everythingElse[`conversationUsers/${conversationId}/${user.uid}`] = {\n            invitedBy: user.uid,\n            userName: user.displayName,\n        }\n\n        // For friends\n        friendSnapshots.forEach((snapshot) => {\n            everythingElse[\n                `userConversations/${snapshot.key}/${conversationId}`\n            ] = {\n                invitedBy: user.uid,\n            }\n            everythingElse[\n                `conversationUsers/${conversationId}/${snapshot.key}`\n            ] = {\n                invitedBy: user.uid,\n                userName: snapshot.child('userName').val() || '',\n            }\n        })\n\n        await db.ref().update(everythingElse)\n\n        return conversationId\n    } catch (outerError) {\n        alert(`something went wrong: ${outerError}`)\n        return null\n    }\n}\n","import firebase from 'firebase'\n\nexport async function createMessage(\n    user: firebase.User,\n    messageText: string,\n    conversationId: string\n) {\n    const message = {\n        sender: user.uid,\n        senderName: user.displayName || '',\n        createdAt: firebase.database.ServerValue.TIMESTAMP,\n        content: messageText,\n        photoURL: user.photoURL,\n    }\n    const newMessageRef = await firebase\n        .database()\n        .ref(`messages/${conversationId}`)\n        .push()\n    return newMessageRef.set(message)\n}\n","import firebase from 'firebase'\n\nexport async function logOut() {\n    return firebase.auth().signOut()\n}\n","import React from 'react'\nimport './styles.scss'\nimport '../../__shared__/styles.scss'\nimport ChatPreview from '../ChatPreview'\nimport HomeToolbar from '../HomeHeader'\nimport Interaction from '../Interaction'\nimport InteractionMessageEditor from '../InteractionMessageEditor'\nimport { ChatsLayout as HomeLayout, InteractionLayout } from './layouts'\nimport withAuth from '../../__shared__/auth/withAuth'\nimport firebase from 'firebase'\nimport InteractionCreator from '../InteractionCreator'\nimport { useConversation } from '../../__shared__/hooks/useConversation'\nimport { useWindowSize } from '../../__shared__/hooks/useWindowSize'\nimport InteractionBar from '../InteractionBar'\nimport { UserSettings } from '../UserSettings'\nimport { ClientConversation } from '../../__shared__/models'\nimport {\n    LayoutStateActionType,\n    useLayoutStateReducer,\n} from './useLayoutStateReducer'\nimport { useUsers } from './useUsers'\nimport BottomSettings from '../BottomSettings'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\nimport Header from '../Header'\nimport { useConversationFormReducer } from './useConversationFormReducer'\nimport { createConversation } from '../../__shared__/models/conversations'\nimport { createMessage } from '../../__shared__/models/messages'\nimport { logOut } from '../../__shared__/auth/utils'\n\ntype ConversationIdDispatchValue<\n    T extends LayoutStateActionType\n> = T extends 'select_conversation'\n    ? {\n          conversationId: string\n      }\n    : {\n          conversationId?: never\n      }\n\ntype DispatchWithConversationAction<T extends LayoutStateActionType> = {\n    type: T\n} & ConversationIdDispatchValue<T>\n\ninterface AppProps {\n    user: firebase.User | null\n}\n\n/*\nWhat should be moved elsewhere?\n- Functions that interact with firebase (create conversation, create message, logout, update user profile)\n- \n */\n\nfunction App(props: AppProps) {\n    const appInitiated = firebase.apps.length > 0\n\n    const {\n        messages,\n        conversations,\n        conversationId,\n        setConversationId,\n    } = useConversation(appInitiated, props.user?.uid)\n    const currentConversation = conversationId\n        ? (conversations.find(\n              (c) => c.id === conversationId\n          ) as ClientConversation)\n        : null\n\n    const [users, userStatuses] = useUsers(appInitiated, props.user?.uid)\n\n    const windowSize = useWindowSize()\n\n    const [currentDraft, setCurrentDraft] = React.useState('')\n\n    const [layoutState, layoutStateDispatch] = useLayoutStateReducer()\n\n    const [\n        conversationFormState,\n        dispatchConversationForm,\n    ] = useConversationFormReducer()\n\n    function handlePreviewSelect(id: string) {\n        dispatchWithConversationId({\n            type: 'select_conversation',\n            conversationId: id,\n        })\n    }\n\n    function dispatchWithConversationId<T extends LayoutStateActionType>(\n        action: DispatchWithConversationAction<T>\n    ) {\n        layoutStateDispatch({ type: action.type })\n        setConversationId(action.conversationId || null)\n    }\n\n    function handleMessageChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n        e.preventDefault()\n        setCurrentDraft(e.target.value)\n    }\n\n    async function _createConversation() {\n        if (!props.user || !appInitiated) {\n            console.error('not logged in')\n            return\n        }\n\n        const conversationId = await createConversation(\n            // TODO remove this repetitiveness and simplify names\n            {\n                name: conversationFormState.newConversationName,\n                peopleToAdd: conversationFormState.peopleForNewConversation,\n            },\n            props.user\n        )\n        if (conversationId) {\n            dispatchWithConversationId({\n                type: 'select_conversation',\n                conversationId,\n            })\n        }\n    }\n\n    async function _createMessage(\n        e: React.MouseEvent<HTMLInputElement, MouseEvent>\n    ) {\n        e.preventDefault()\n\n        if (!props.user || !appInitiated) {\n            console.error('not logged in')\n            return\n        } else if (!conversationId) {\n            console.error('no conversation selected')\n            return\n        }\n\n        try {\n            await createMessage(props.user, currentDraft, conversationId)\n            setCurrentDraft('')\n        } catch (e) {\n            alert(`something went wrong... ${e}`)\n        }\n    }\n\n    async function _logOut() {\n        try {\n            await logOut()\n        } catch (e) {\n            console.error(`unable to log out: ${e}`)\n        }\n    }\n\n    function openConversationForm(\n        e: React.MouseEvent<HTMLInputElement, MouseEvent>\n    ) {\n        e.preventDefault()\n        dispatchWithConversationId({ type: 'show_conversation_form' })\n    }\n\n    function openUserSettings(\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    ) {\n        e.preventDefault()\n        dispatchWithConversationId({ type: 'show_user_settings' })\n    }\n\n    function updateUserProfile(\n        userInfo: Partial<Pick<firebase.UserInfo, 'displayName' | 'photoURL'>>\n    ) {\n        props.user?.updateProfile(userInfo).catch((error) => {\n            alert(`user profile not updated with error ${error}`)\n        })\n    }\n\n    function returnToMain() {\n        dispatchWithConversationId({ type: 'return_to_main' })\n    }\n\n    const showInteractionLayout =\n        windowSize !== 'xs' ||\n        (windowSize === 'xs' &&\n            (conversationId ||\n                layoutState.showConversationForm ||\n                layoutState.showUserSettings))\n    const showHomeLayout =\n        windowSize !== 'xs' ||\n        (windowSize === 'xs' &&\n            !conversationId &&\n            !layoutState.showConversationForm &&\n            !layoutState.showUserSettings)\n\n    return (\n        <div id=\"app-root\">\n            {showHomeLayout && (\n                <HomeLayout>\n                    <HomeToolbar\n                        user={props.user}\n                        userState={\n                            props.user && userStatuses[props.user.uid]?.state\n                        }\n                    />\n                    <div\n                        onClick={openConversationForm}\n                        className=\"hover\"\n                        style={{\n                            margin: '16px 0',\n                            padding: '8px 16px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                        }}\n                    >\n                        New conversation\n                        <div\n                            style={{\n                                display: 'flex',\n                                height: '32px',\n                                width: '32px',\n                                backgroundColor: 'black',\n                                alignItems: 'center',\n                                justifyContent: 'center',\n                                color: 'white',\n                                borderRadius: '5px',\n                                marginLeft: '8px',\n                            }}\n                        >\n                            <FontAwesomeIcon icon={faPlusCircle} size={'sm'} />\n                        </div>\n                    </div>\n\n                    <div\n                        style={{\n                            height: '100%',\n                            padding: '0px 0px 16px',\n                        }}\n                    >\n                        <div>\n                            <div\n                                style={{\n                                    overflow: 'auto',\n                                }}\n                            >\n                                {conversations.map((convo) => (\n                                    <ChatPreview\n                                        key={convo.id}\n                                        conversation={convo}\n                                        onPreviewClick={handlePreviewSelect}\n                                    />\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                    <BottomSettings\n                        logOut={_logOut}\n                        openUserSettings={openUserSettings}\n                    />\n                </HomeLayout>\n            )}\n\n            {showInteractionLayout && (\n                <InteractionLayout>\n                    {currentConversation && props.user ? (\n                        <>\n                            <InteractionBar\n                                backIcon={windowSize === 'xs' ? '<' : 'X'}\n                                back={returnToMain}\n                                conversation={currentConversation}\n                            />\n                            <Interaction\n                                userId={props.user.uid}\n                                conversation={currentConversation}\n                                messages={messages}\n                                statuses={userStatuses}\n                            />\n                            <InteractionMessageEditor\n                                // userId={props.user.uid}\n                                currentDraft={currentDraft}\n                                handleMessageChange={handleMessageChange}\n                                handleSend={_createMessage}\n                            />\n                        </>\n                    ) : layoutState.showConversationForm ? (\n                        <>\n                            <Header>\n                                <div\n                                    onClick={returnToMain}\n                                    style={{\n                                        display: 'flex',\n                                        backgroundColor: 'black',\n                                        color: 'white',\n                                        borderRadius: '5px',\n                                        cursor: 'pointer',\n                                        padding: '8px 8px 8px 0',\n                                    }}\n                                >\n                                    <FontAwesomeIcon\n                                        icon={faArrowLeft}\n                                        size={'lg'}\n                                    />\n                                </div>\n                                <h3 style={{ marginLeft: '8px' }}>\n                                    New conversation\n                                </h3>\n                                <div\n                                    onClick={_createConversation}\n                                    style={{\n                                        cursor: 'pointer',\n                                        padding: '8px 0 8px 8px',\n                                        marginLeft: 'auto',\n                                    }}\n                                >\n                                    Create\n                                </div>\n                            </Header>\n                            <InteractionCreator\n                                userId={props.user?.uid}\n                                users={users}\n                                userStatuses={userStatuses}\n                                formState={conversationFormState}\n                                dispatchForm={dispatchConversationForm}\n                            />\n                        </>\n                    ) : layoutState.showUserSettings ? (\n                        <UserSettings\n                            displayName={props.user?.displayName || ''}\n                            updateProfile={updateUserProfile}\n                        />\n                    ) : null}\n                </InteractionLayout>\n            )}\n        </div>\n    )\n}\n\nexport default withAuth(App)\n","import * as React from 'react'\nimport { SignIn } from '../../components/SignIn'\nimport useFirebaseAuth from './useFirebaseAuth'\n\nexport default function withAuth(WrappedComponent: React.ElementType) {\n    return function Hoc(props: Record<string, unknown>) {\n        const [user, showSignInPopup] = useFirebaseAuth()\n\n        return user ? (\n            <WrappedComponent user={user} {...props} />\n        ) : (\n            <SignIn showSignInPopup={showSignInPopup} />\n        )\n    }\n}\n","import App from './App'\n\nexport default App\n","import React, { useState, useEffect } from 'react'\nimport firebase from 'firebase'\nimport { ClientConversation, ClientMessage, ServerMessage } from '../models'\n\n/**\n * The primary hook of the app. Fetches and listens to conversation and message data\n */\nexport function useConversation(\n    initialized: boolean,\n    userId?: string\n): {\n    messages: ClientMessage[]\n    conversations: ClientConversation[]\n    conversationId: string | null\n    setConversationId: React.Dispatch<React.SetStateAction<string | null>>\n} {\n    const [conversations, setConversations] = useState<ClientConversation[]>([])\n    const [conversationId, setConversationId] = useState<string | null>(null)\n    const [messages, setMessages] = useState<ClientMessage[]>([])\n\n    /**\n     * Pull conversations, userConversations, and conversationUsers.\n     * Also listens to new conversations.\n     */\n    useEffect(() => {\n        try {\n            if (!initialized || !userId) {\n                return\n            }\n\n            const db = firebase.database()\n\n            const userConversationsRefString = `userConversations/${userId}`\n            const userConversationsRef = db.ref(userConversationsRefString)\n\n            // What I need to do next is display a list of conversations in the UI that the user has access to.\n            // I need to use a combination of userConversations and conversations.\n            // userConversations for knowing which user has access to what conversation,\n            // and conversations for getting the metadata of conversations,\n            // then conversationUsers to know who is in the conversation.\n\n            ;(async () => {\n                const userConversationsOnce = await userConversationsRef\n                    .orderByKey()\n                    .once('value')\n                const initialConversations: ClientConversation[] = []\n                let lastInitialUserConversationId = ''\n                if (userConversationsOnce.exists()) {\n                    const convoPromises: Promise<firebase.database.DataSnapshot>[] = []\n                    const cuPromises: Promise<firebase.database.DataSnapshot>[] = []\n\n                    userConversationsOnce.forEach((uc) => {\n                        convoPromises.push(\n                            db\n                                .ref(`conversations/${uc.key}`)\n                                .orderByKey()\n                                .once('value')\n                        )\n                        cuPromises.push(\n                            db\n                                .ref(`conversationUsers/${uc.key}`)\n                                .orderByKey()\n                                .once('value')\n                        )\n                    })\n\n                    const convoResolved = await Promise.all(convoPromises)\n                    const cuResolved = await Promise.all(cuPromises)\n\n                    // Loop through each conversation the logged in user is a part of\n                    // to create a ClientConversation for each conversation.\n                    userConversationsOnce.forEach((uc) => {\n                        if (!uc.key) {\n                            return\n                        }\n                        const convo: ClientConversation = {\n                            id: uc.key,\n                            otherUsers: [],\n                            name: '',\n                        }\n                        // Check if conversation keys match\n                        const matchedConversation = convoResolved.find(\n                            (cor) => cor.ref.key === uc.key\n                        )\n                        const matchedConversationUsers = cuResolved.find(\n                            (cur) => cur.ref.key === uc.key\n                        )\n\n                        // Add name to convo\n                        if (matchedConversation) {\n                            convo.name = matchedConversation.val().name\n                        }\n\n                        // Add other users to the ClientConversation.\n                        if (matchedConversationUsers) {\n                            matchedConversationUsers.forEach(\n                                (conversationUser) => {\n                                    if (\n                                        conversationUser.key &&\n                                        conversationUser.key !== userId\n                                    ) {\n                                        convo.otherUsers.push({\n                                            id: conversationUser.key,\n                                            userName: conversationUser\n                                                .child('userName')\n                                                .val(),\n                                        })\n                                    }\n                                }\n                            )\n                        }\n\n                        initialConversations.push(convo)\n                    })\n\n                    setConversations(initialConversations)\n\n                    lastInitialUserConversationId =\n                        initialConversations.length > 0\n                            ? initialConversations[\n                                  initialConversations.length - 1\n                              ].id\n                            : ''\n                } else {\n                    setConversations([])\n                    setConversationId(null)\n                }\n\n                userConversationsRef\n                    .orderByKey()\n                    .startAfter(lastInitialUserConversationId)\n                    .on(\n                        'child_added',\n                        (userConversationSnapshot, previousChildKey) => {\n                            // userConversationSnapshot.key is a new conversation key\n                            const ucKey = userConversationSnapshot.key\n                            if (!ucKey) {\n                                return\n                            }\n                            const convo: ClientConversation = {\n                                id: ucKey,\n                                otherUsers: [],\n                                name: '',\n                            }\n                            db.ref(`conversations/${ucKey}`)\n                                .orderByKey()\n                                .once('value')\n                                .then((conversation) => {\n                                    convo.name = conversation.val().name\n                                    db.ref(`conversationUsers/${ucKey}`)\n                                        .orderByKey()\n                                        .once('value')\n                                        .then((newConversationUsers) => {\n                                            newConversationUsers.forEach(\n                                                (ncu) => {\n                                                    if (\n                                                        ncu.key &&\n                                                        ncu.key !== userId\n                                                    ) {\n                                                        convo.otherUsers.push({\n                                                            id: ncu.key,\n                                                            userName: ncu\n                                                                .child(\n                                                                    'userName'\n                                                                )\n                                                                .val(),\n                                                        })\n                                                    }\n                                                }\n                                            )\n                                            setConversations((prev) => [\n                                                ...prev,\n                                                convo,\n                                            ])\n                                        })\n                                })\n                        }\n                    )\n            })()\n\n            return () => {\n                userConversationsRef.off('child_added')\n            }\n        } catch (e) {\n            console.error(e)\n            return\n        }\n    }, [initialized, userId])\n\n    /**\n     * Pulls messages, and listens to new ones.\n     */\n    useEffect(() => {\n        try {\n            if (!initialized || !userId || !conversationId) {\n                return\n            }\n\n            const db = firebase.database()\n            const messagesRefString = `messages/${conversationId}`\n            const messagesRef = db.ref(messagesRefString)\n\n            ;(async () => {\n                const messagesOnce = await messagesRef\n                    .orderByKey()\n                    .once('value')\n                const initialMessages: ClientMessage[] = []\n\n                if (messagesOnce.exists()) {\n                    messagesOnce.forEach((m) => {\n                        if (m.key) {\n                            const serverMessage = m.toJSON() as ServerMessage\n                            initialMessages.push({\n                                ...serverMessage,\n                                id: m.key,\n                            })\n                        }\n                    })\n                    setMessages(initialMessages)\n                } else {\n                    setMessages([])\n                }\n\n                const lastInitialMessageId: string =\n                    initialMessages.length > 0\n                        ? initialMessages[initialMessages.length - 1].id\n                        : ''\n                messagesRef\n                    .orderByKey()\n                    .startAfter(lastInitialMessageId)\n                    .on('child_added', (messageSnapshot, previousChildKey) => {\n                        if (messageSnapshot.key) {\n                            const serverMessage = messageSnapshot.toJSON() as ServerMessage\n                            const clientMessage: ClientMessage = {\n                                ...serverMessage,\n                                id: messageSnapshot.key,\n                            }\n                            setMessages((prev) => [...prev, clientMessage])\n                        }\n                    })\n            })()\n\n            return () => {\n                messagesRef.off('child_added')\n            }\n        } catch (e) {\n            console.error(e)\n        }\n    }, [initialized, userId, conversationId])\n\n    return {\n        messages,\n        conversations,\n        conversationId,\n        setConversationId,\n    }\n}\n","import * as React from 'react'\nimport firebase from 'firebase'\nimport {\n    ServerUserStatus,\n    ClientUserStatuses,\n} from '../../__shared__/types/userStatus'\nimport { ClientUser } from '../../__shared__/types/user'\n\nexport function useUsers(\n    initialized: boolean,\n    userId: string | undefined\n): [ClientUser[], ClientUserStatuses] {\n    const [statuses, setStatuses] = React.useState<ClientUserStatuses>({})\n    const [users, setUsers] = React.useState<ClientUser[]>([])\n\n    /**\n     * Updates the logged-in user's status in the database.\n     */\n    React.useEffect(() => {\n        if (!initialized || !userId) {\n            return\n        }\n\n        const db = firebase.database()\n        const userStatusDatabaseRef = db.ref('/status/' + userId)\n        const infoConnectedRef = db.ref('.info/connected')\n\n        // The below is from firebase docs\n\n        const isOfflineForDatabase: ServerUserStatus = {\n            state: 'offline',\n            lastChanged: firebase.database.ServerValue.TIMESTAMP,\n        }\n\n        const isOnlineForDatabase: ServerUserStatus = {\n            state: 'online',\n            lastChanged: firebase.database.ServerValue.TIMESTAMP,\n        }\n\n        // Create a reference to the special '.info/connected' path in\n        // Realtime Database. This path returns `true` when connected\n        // and `false` when disconnected.\n        infoConnectedRef.on('value', function (snapshot) {\n            // If we're not currently connected, don't do anything.\n            if (!snapshot.val()) {\n                return\n            }\n\n            // If we are currently connected, then use the 'onDisconnect()'\n            // method to add a set which will only trigger once this\n            // client has disconnected by closing the app,\n            // losing internet, or any other means.\n            userStatusDatabaseRef\n                .onDisconnect()\n                .set(isOfflineForDatabase)\n                .then(function () {\n                    // The promise returned from .onDisconnect().set() will\n                    // resolve as soon as the server acknowledges the onDisconnect()\n                    // request, NOT once we've actually disconnected:\n                    // https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect\n\n                    // We can now safely set ourselves as 'online' knowing that the\n                    // server will mark us as offline once we lose connection.\n                    userStatusDatabaseRef.set(isOnlineForDatabase)\n                })\n        })\n\n        return () => {\n            infoConnectedRef.off('value')\n        }\n    }, [initialized, userId])\n\n    /**\n     * Reads and listens to statuses for all users.\n     */\n    React.useEffect(() => {\n        if (!initialized) {\n            return\n        }\n\n        const db = firebase.database()\n        const statusRef = db.ref('/status')\n\n        ;(async () => {\n            let lastStatusKey = ''\n            const newStatuses: ClientUserStatuses = {}\n\n            const statusResolved = await db\n                .ref('/status')\n                .orderByKey()\n                .once('value')\n            statusResolved.forEach((data) => {\n                if (data.key) {\n                    lastStatusKey = data.key\n                    newStatuses[data.key] = {\n                        state: data.child('state').val(),\n                        lastChanged: data.child('lastChanged').val(),\n                    }\n                }\n            })\n            setStatuses(newStatuses)\n\n            statusRef.startAfter(lastStatusKey).on('child_added', (data) => {\n                const key = data.key\n                if (key) {\n                    setStatuses((prev) => ({\n                        ...prev,\n                        [key]: {\n                            state: data.child('state').val(),\n                            lastChanged: data.child('lastChanged').val(),\n                        },\n                    }))\n                }\n            })\n\n            statusRef.on('child_changed', (data) => {\n                const key = data.key\n                if (key) {\n                    setStatuses((prev) => ({\n                        ...prev,\n                        [key]: {\n                            state: data.child('state').val(),\n                            lastChanged: data.child('lastChanged').val(),\n                        },\n                    }))\n                }\n            })\n        })()\n\n        return () => {\n            statusRef.off('child_added')\n            statusRef.off('child_changed')\n        }\n    }, [initialized])\n\n    /**\n     * Reads and listens to users.\n     */\n    React.useEffect(() => {\n        if (!initialized) {\n            return\n        }\n\n        const db = firebase.database()\n        const usersRef = db.ref('/users')\n\n        ;(async () => {\n            let lastUserKey = ''\n            const newUsers: ClientUser[] = []\n\n            const usersResolved = await db\n                .ref('/users')\n                .orderByKey()\n                .once('value')\n            usersResolved.forEach((data) => {\n                if (data.key) {\n                    lastUserKey = data.key\n                    newUsers.push({\n                        id: data.key,\n                        userName: data.child('userName').val(),\n                        photoURL: data.child('photoURL').val(),\n                    })\n                }\n            })\n            setUsers(newUsers)\n\n            usersRef.startAfter(lastUserKey).on('child_added', (data) => {\n                const key = data.key\n                if (key) {\n                    setUsers((prev) => [\n                        ...prev,\n                        {\n                            id: key,\n                            userName: data.child('userName').val(),\n                            photoURL: data.child('photoURL').val(),\n                        },\n                    ])\n                }\n            })\n\n            usersRef.on('child_changed', (data) => {\n                const key = data.key\n                if (key) {\n                    setUsers((prev) => {\n                        const newUsers = [...prev]\n                        const changedUser = newUsers.find(\n                            (user) => user.id === key\n                        )\n                        if (changedUser) {\n                            changedUser.userName = data.child('userName').val()\n                            changedUser.photoURL = data.child('photoURL').val()\n                        }\n                        return newUsers\n                    })\n                }\n            })\n        })()\n\n        return () => {\n            usersRef.off('child_added')\n            usersRef.off('child_changed')\n        }\n    }, [initialized])\n\n    return [users, statuses]\n}\n","import { useState, useEffect } from 'react'\n\nexport type WindowSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl'\n\n// Initially based on https://usehooks.com/useWindowSize/\nexport function useWindowSize(): WindowSize | undefined {\n    const [windowSize, setWindowSize] = useState<WindowSize | undefined>(() => {\n        return calculateWindowSize(window.innerWidth)\n    })\n\n    function calculateWindowSize(windowWidth: number): WindowSize {\n        if (windowWidth >= 1920) {\n            return 'xl'\n        } else if (windowWidth >= 1280) {\n            return 'lg'\n        } else if (windowWidth >= 960) {\n            return 'md'\n        } else if (windowWidth >= 700) {\n            return 'sm'\n        } else {\n            return 'xs'\n        }\n    }\n\n    useEffect(() => {\n        function handleResize() {\n            const width = window.innerWidth\n            setWindowSize(calculateWindowSize(width))\n        }\n\n        window.addEventListener('resize', handleResize)\n\n        handleResize()\n\n        return () => window.removeEventListener('resize', handleResize)\n    }, [])\n\n    return windowSize\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://cra.link/PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://cra.link/PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}